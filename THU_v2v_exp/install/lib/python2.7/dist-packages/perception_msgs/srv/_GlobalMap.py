# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/GlobalMapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GlobalMapRequest(genpy.Message):
  _md5sum = "ff63f6ea3c3e9b7504b2cb3ee0a09d92"
  _type = "perception_msgs/GlobalMapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 mode
"""
  __slots__ = ['mode']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalMapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
    else:
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.mode,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.mode,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/GlobalMapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import perception_msgs.msg
import std_msgs.msg

class GlobalMapResponse(genpy.Message):
  _md5sum = "a170b31a8e9ad04adc0dd48f6ea17a9e"
  _type = "perception_msgs/GlobalMapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """perception_msgs/Map map


================================================================================
MSG: perception_msgs/Map
#############################
###       SunHao          ###
#############################


std_msgs/Header header

geometry_msgs/Point origin_utm_pt

perception_msgs/Section[] sections

std_msgs/String uuid

int32 id
# -1 : closed map
# 0 : simple map
# 1: topo map
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: perception_msgs/Section
#############################
###       SunHao          ###
#############################



perception_msgs/Line[] lanes

int32 direction_mode

#############################
#int32 id
std_msgs/String uuid

#############################

std_msgs/String[] to_section_uuid
std_msgs/String[] from_section_uuid


std_msgs/String[] to_lane_uuid
std_msgs/String[] from_lane_uuid


std_msgs/String[] to_pt_uuid
std_msgs/String[] from_pt_uuid

#int32[] to_pt_id
#int32[] from_pt_id

#############################

float32 length
float32 highest_speed
float32 traffic_cost



================================================================================
MSG: perception_msgs/Line
#############################
###       SunHao          ###
#############################

perception_msgs/Point[] pts

#############################
int8 is_main # Is the lane center lane of this section
float64 offset
float64 width

#############################

#int32 id
std_msgs/String uuid

#############################

std_msgs/String main_uuid

#int32 left_id
std_msgs/String left_uuid

#int32 right_id
std_msgs/String right_uuid


#############################

#int32 section_id
std_msgs/String section_uuid

#############################


================================================================================
MSG: perception_msgs/Point
#############################
###       SunHao          ###
#############################

float64 x
float64 y
float64 z
float64 s
float64 cuv
float64 heading
float64 speed
float64 speedkmh

############################


int32 rtk_mode # 0: 无影响 1： Not rtk stop
int32 driving_mode # acc or collision avoidance
int32 special_mode  #

####################################33
int32 obs_search_strategy  # 0: donot search obs
int32 speed_mode  #
int32 obs_strategy  #
int32 follow_strategy  #
int32 cross_option  #
int32 reserved_option  #



############################

#int32 id
std_msgs/String uuid

#############################

#int32 line_id
std_msgs/String lane_uuid

#############################

#int32 section_id
std_msgs/String section_uuid



================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['map']
  _slot_types = ['perception_msgs/Map']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalMapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.map is None:
        self.map = perception_msgs.msg.Map()
    else:
      self.map = perception_msgs.msg.Map()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs))
      _x = self.map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.map.origin_utm_pt.x, _x.map.origin_utm_pt.y, _x.map.origin_utm_pt.z))
      length = len(self.map.sections)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.sections:
        length = len(val1.lanes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lanes:
          length = len(val2.pts)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts:
            _x = val3
            buff.write(_get_struct_8d9i().pack(_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option))
            _v1 = val3.uuid
            _x = _v1.data
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v2 = val3.lane_uuid
            _x = _v2.data
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v3 = val3.section_uuid
            _x = _v3.data
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_b2d().pack(_x.is_main, _x.offset, _x.width))
          _v4 = val2.uuid
          _x = _v4.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v5 = val2.main_uuid
          _x = _v5.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v6 = val2.left_uuid
          _x = _v6.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v7 = val2.right_uuid
          _x = _v7.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v8 = val2.section_uuid
          _x = _v8.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.direction_mode))
        _v9 = val1.uuid
        _x = _v9.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.to_section_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_section_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.from_section_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_section_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.to_lane_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_lane_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.from_lane_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_lane_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.to_pt_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_pt_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.from_pt_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_pt_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.length, _x.highest_speed, _x.traffic_cost))
      _x = self.map.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.map.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.map is None:
        self.map = perception_msgs.msg.Map()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.map.origin_utm_pt.x, _x.map.origin_utm_pt.y, _x.map.origin_utm_pt.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.sections = []
      for i in range(0, length):
        val1 = perception_msgs.msg.Section()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lanes = []
        for i in range(0, length):
          val2 = perception_msgs.msg.Line()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts = []
          for i in range(0, length):
            val3 = perception_msgs.msg.Point()
            _x = val3
            start = end
            end += 100
            (_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
            _v10 = val3.uuid
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v10.data = str[start:end].decode('utf-8')
            else:
              _v10.data = str[start:end]
            _v11 = val3.lane_uuid
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v11.data = str[start:end].decode('utf-8')
            else:
              _v11.data = str[start:end]
            _v12 = val3.section_uuid
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v12.data = str[start:end].decode('utf-8')
            else:
              _v12.data = str[start:end]
            val2.pts.append(val3)
          _x = val2
          start = end
          end += 17
          (_x.is_main, _x.offset, _x.width,) = _get_struct_b2d().unpack(str[start:end])
          _v13 = val2.uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v13.data = str[start:end].decode('utf-8')
          else:
            _v13.data = str[start:end]
          _v14 = val2.main_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v14.data = str[start:end].decode('utf-8')
          else:
            _v14.data = str[start:end]
          _v15 = val2.left_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v15.data = str[start:end].decode('utf-8')
          else:
            _v15.data = str[start:end]
          _v16 = val2.right_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v16.data = str[start:end].decode('utf-8')
          else:
            _v16.data = str[start:end]
          _v17 = val2.section_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v17.data = str[start:end].decode('utf-8')
          else:
            _v17.data = str[start:end]
          val1.lanes.append(val2)
        start = end
        end += 4
        (val1.direction_mode,) = _get_struct_i().unpack(str[start:end])
        _v18 = val1.uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.data = str[start:end].decode('utf-8')
        else:
          _v18.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_section_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.to_section_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_section_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.from_section_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_lane_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.to_lane_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_lane_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.from_lane_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_pt_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.to_pt_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_pt_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.from_pt_uuid.append(val2)
        _x = val1
        start = end
        end += 12
        (_x.length, _x.highest_speed, _x.traffic_cost,) = _get_struct_3f().unpack(str[start:end])
        self.map.sections.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.uuid.data = str[start:end].decode('utf-8')
      else:
        self.map.uuid.data = str[start:end]
      start = end
      end += 4
      (self.map.id,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs))
      _x = self.map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.map.origin_utm_pt.x, _x.map.origin_utm_pt.y, _x.map.origin_utm_pt.z))
      length = len(self.map.sections)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.sections:
        length = len(val1.lanes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.lanes:
          length = len(val2.pts)
          buff.write(_struct_I.pack(length))
          for val3 in val2.pts:
            _x = val3
            buff.write(_get_struct_8d9i().pack(_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option))
            _v19 = val3.uuid
            _x = _v19.data
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v20 = val3.lane_uuid
            _x = _v20.data
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v21 = val3.section_uuid
            _x = _v21.data
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_b2d().pack(_x.is_main, _x.offset, _x.width))
          _v22 = val2.uuid
          _x = _v22.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v23 = val2.main_uuid
          _x = _v23.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v24 = val2.left_uuid
          _x = _v24.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v25 = val2.right_uuid
          _x = _v25.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v26 = val2.section_uuid
          _x = _v26.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.direction_mode))
        _v27 = val1.uuid
        _x = _v27.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.to_section_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_section_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.from_section_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_section_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.to_lane_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_lane_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.from_lane_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_lane_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.to_pt_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.to_pt_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.from_pt_uuid)
        buff.write(_struct_I.pack(length))
        for val2 in val1.from_pt_uuid:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.length, _x.highest_speed, _x.traffic_cost))
      _x = self.map.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.map.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.map is None:
        self.map = perception_msgs.msg.Map()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.map.origin_utm_pt.x, _x.map.origin_utm_pt.y, _x.map.origin_utm_pt.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.sections = []
      for i in range(0, length):
        val1 = perception_msgs.msg.Section()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.lanes = []
        for i in range(0, length):
          val2 = perception_msgs.msg.Line()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.pts = []
          for i in range(0, length):
            val3 = perception_msgs.msg.Point()
            _x = val3
            start = end
            end += 100
            (_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
            _v28 = val3.uuid
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v28.data = str[start:end].decode('utf-8')
            else:
              _v28.data = str[start:end]
            _v29 = val3.lane_uuid
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v29.data = str[start:end].decode('utf-8')
            else:
              _v29.data = str[start:end]
            _v30 = val3.section_uuid
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v30.data = str[start:end].decode('utf-8')
            else:
              _v30.data = str[start:end]
            val2.pts.append(val3)
          _x = val2
          start = end
          end += 17
          (_x.is_main, _x.offset, _x.width,) = _get_struct_b2d().unpack(str[start:end])
          _v31 = val2.uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v31.data = str[start:end].decode('utf-8')
          else:
            _v31.data = str[start:end]
          _v32 = val2.main_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v32.data = str[start:end].decode('utf-8')
          else:
            _v32.data = str[start:end]
          _v33 = val2.left_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v33.data = str[start:end].decode('utf-8')
          else:
            _v33.data = str[start:end]
          _v34 = val2.right_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v34.data = str[start:end].decode('utf-8')
          else:
            _v34.data = str[start:end]
          _v35 = val2.section_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v35.data = str[start:end].decode('utf-8')
          else:
            _v35.data = str[start:end]
          val1.lanes.append(val2)
        start = end
        end += 4
        (val1.direction_mode,) = _get_struct_i().unpack(str[start:end])
        _v36 = val1.uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.data = str[start:end].decode('utf-8')
        else:
          _v36.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_section_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.to_section_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_section_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.from_section_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_lane_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.to_lane_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_lane_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.from_lane_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.to_pt_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.to_pt_uuid.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.from_pt_uuid = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8')
          else:
            val2.data = str[start:end]
          val1.from_pt_uuid.append(val2)
        _x = val1
        start = end
        end += 12
        (_x.length, _x.highest_speed, _x.traffic_cost,) = _get_struct_3f().unpack(str[start:end])
        self.map.sections.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.uuid.data = str[start:end].decode('utf-8')
      else:
        self.map.uuid.data = str[start:end]
      start = end
      end += 4
      (self.map.id,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8d9i = None
def _get_struct_8d9i():
    global _struct_8d9i
    if _struct_8d9i is None:
        _struct_8d9i = struct.Struct("<8d9i")
    return _struct_8d9i
_struct_b2d = None
def _get_struct_b2d():
    global _struct_b2d
    if _struct_b2d is None:
        _struct_b2d = struct.Struct("<b2d")
    return _struct_b2d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class GlobalMap(object):
  _type          = 'perception_msgs/GlobalMap'
  _md5sum = 'd26fdf98f211670f5a52fac3522681f7'
  _request_class  = GlobalMapRequest
  _response_class = GlobalMapResponse
