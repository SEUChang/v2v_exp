// Generated by gencpp from file dnc_msgs/Mission.msg
// DO NOT EDIT!


#ifndef DNC_MSGS_MESSAGE_MISSION_H
#define DNC_MSGS_MESSAGE_MISSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace dnc_msgs
{
template <class ContainerAllocator>
struct Mission_
{
  typedef Mission_<ContainerAllocator> Type;

  Mission_()
    : mission_pt()
    , mission_type()  {
    }
  Mission_(const ContainerAllocator& _alloc)
    : mission_pt(_alloc)
    , mission_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _mission_pt_type;
  _mission_pt_type mission_pt;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _mission_type_type;
  _mission_type_type mission_type;





  typedef boost::shared_ptr< ::dnc_msgs::Mission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnc_msgs::Mission_<ContainerAllocator> const> ConstPtr;

}; // struct Mission_

typedef ::dnc_msgs::Mission_<std::allocator<void> > Mission;

typedef boost::shared_ptr< ::dnc_msgs::Mission > MissionPtr;
typedef boost::shared_ptr< ::dnc_msgs::Mission const> MissionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnc_msgs::Mission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnc_msgs::Mission_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dnc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dnc_msgs': ['/home/sunhao/prog/wild/src/dnc_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dnc_msgs::Mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnc_msgs::Mission_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnc_msgs::Mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnc_msgs::Mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnc_msgs::Mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnc_msgs::Mission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnc_msgs::Mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "723fd4f61ea387de4693090c6c8f5797";
  }

  static const char* value(const ::dnc_msgs::Mission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x723fd4f61ea387deULL;
  static const uint64_t static_value2 = 0x4693090c6c8f5797ULL;
};

template<class ContainerAllocator>
struct DataType< ::dnc_msgs::Mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnc_msgs/Mission";
  }

  static const char* value(const ::dnc_msgs::Mission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnc_msgs::Mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#############################\n\
#     Mision file           #\n\
#############################\n\
\n\
\n\
geometry_msgs/Point[] mission_pt\n\
uint32[]  mission_type\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::dnc_msgs::Mission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnc_msgs::Mission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_pt);
      stream.next(m.mission_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnc_msgs::Mission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnc_msgs::Mission_<ContainerAllocator>& v)
  {
    s << indent << "mission_pt[]" << std::endl;
    for (size_t i = 0; i < v.mission_pt.size(); ++i)
    {
      s << indent << "  mission_pt[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.mission_pt[i]);
    }
    s << indent << "mission_type[]" << std::endl;
    for (size_t i = 0; i < v.mission_type.size(); ++i)
    {
      s << indent << "  mission_type[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.mission_type[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNC_MSGS_MESSAGE_MISSION_H
