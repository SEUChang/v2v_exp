// Generated by gencpp from file perception_msgs/MapCfg.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_MAPCFG_H
#define PERCEPTION_MSGS_MESSAGE_MAPCFG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct MapCfg_
{
  typedef MapCfg_<ContainerAllocator> Type;

  MapCfg_()
    : start_or_pause(false)
    , stop_and_save(false)
    , closed(false)
    , speed_limit_kph(0.0)
    , bag_name()
    , tpk_name()
    , rtk_mode(0)
    , driving_mode(0)
    , special_mode(0)
    , obs_search_strategy(0)
    , speed_mode(0)
    , obs_strategy(0)
    , follow_strategy(0)
    , cross_option(0)
    , reserved_option(0)  {
    }
  MapCfg_(const ContainerAllocator& _alloc)
    : start_or_pause(false)
    , stop_and_save(false)
    , closed(false)
    , speed_limit_kph(0.0)
    , bag_name(_alloc)
    , tpk_name(_alloc)
    , rtk_mode(0)
    , driving_mode(0)
    , special_mode(0)
    , obs_search_strategy(0)
    , speed_mode(0)
    , obs_strategy(0)
    , follow_strategy(0)
    , cross_option(0)
    , reserved_option(0)  {
  (void)_alloc;
    }



   typedef uint8_t _start_or_pause_type;
  _start_or_pause_type start_or_pause;

   typedef uint8_t _stop_and_save_type;
  _stop_and_save_type stop_and_save;

   typedef uint8_t _closed_type;
  _closed_type closed;

   typedef float _speed_limit_kph_type;
  _speed_limit_kph_type speed_limit_kph;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bag_name_type;
  _bag_name_type bag_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tpk_name_type;
  _tpk_name_type tpk_name;

   typedef int32_t _rtk_mode_type;
  _rtk_mode_type rtk_mode;

   typedef int32_t _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef int32_t _special_mode_type;
  _special_mode_type special_mode;

   typedef int32_t _obs_search_strategy_type;
  _obs_search_strategy_type obs_search_strategy;

   typedef int32_t _speed_mode_type;
  _speed_mode_type speed_mode;

   typedef int32_t _obs_strategy_type;
  _obs_strategy_type obs_strategy;

   typedef int32_t _follow_strategy_type;
  _follow_strategy_type follow_strategy;

   typedef int32_t _cross_option_type;
  _cross_option_type cross_option;

   typedef int32_t _reserved_option_type;
  _reserved_option_type reserved_option;





  typedef boost::shared_ptr< ::perception_msgs::MapCfg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::MapCfg_<ContainerAllocator> const> ConstPtr;

}; // struct MapCfg_

typedef ::perception_msgs::MapCfg_<std::allocator<void> > MapCfg;

typedef boost::shared_ptr< ::perception_msgs::MapCfg > MapCfgPtr;
typedef boost::shared_ptr< ::perception_msgs::MapCfg const> MapCfgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::MapCfg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::MapCfg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/sunhao/wild/src/perception_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::MapCfg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::MapCfg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::MapCfg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::MapCfg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::MapCfg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::MapCfg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::MapCfg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "114743d989eebb15f931732b39a7a0f5";
  }

  static const char* value(const ::perception_msgs::MapCfg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x114743d989eebb15ULL;
  static const uint64_t static_value2 = 0xf931732b39a7a0f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::MapCfg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/MapCfg";
  }

  static const char* value(const ::perception_msgs::MapCfg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::MapCfg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
bool start_or_pause\n\
bool stop_and_save\n\
bool closed\n\
float32 speed_limit_kph\n\
\n\
string bag_name\n\
string tpk_name\n\
####################################33\n\
\n\
int32 rtk_mode\n\
int32 driving_mode # acc or collision avoidance\n\
int32 special_mode  #\n\
\n\
####################################33\n\
int32 obs_search_strategy  # 0: donot search obs\n\
int32 speed_mode  #\n\
int32 obs_strategy  #\n\
int32 follow_strategy  #\n\
int32 cross_option  #\n\
int32 reserved_option  #\n\
";
  }

  static const char* value(const ::perception_msgs::MapCfg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::MapCfg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_or_pause);
      stream.next(m.stop_and_save);
      stream.next(m.closed);
      stream.next(m.speed_limit_kph);
      stream.next(m.bag_name);
      stream.next(m.tpk_name);
      stream.next(m.rtk_mode);
      stream.next(m.driving_mode);
      stream.next(m.special_mode);
      stream.next(m.obs_search_strategy);
      stream.next(m.speed_mode);
      stream.next(m.obs_strategy);
      stream.next(m.follow_strategy);
      stream.next(m.cross_option);
      stream.next(m.reserved_option);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapCfg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::MapCfg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::MapCfg_<ContainerAllocator>& v)
  {
    s << indent << "start_or_pause: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_or_pause);
    s << indent << "stop_and_save: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_and_save);
    s << indent << "closed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.closed);
    s << indent << "speed_limit_kph: ";
    Printer<float>::stream(s, indent + "  ", v.speed_limit_kph);
    s << indent << "bag_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bag_name);
    s << indent << "tpk_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tpk_name);
    s << indent << "rtk_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rtk_mode);
    s << indent << "driving_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driving_mode);
    s << indent << "special_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.special_mode);
    s << indent << "obs_search_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_search_strategy);
    s << indent << "speed_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed_mode);
    s << indent << "obs_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs_strategy);
    s << indent << "follow_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.follow_strategy);
    s << indent << "cross_option: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cross_option);
    s << indent << "reserved_option: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reserved_option);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_MAPCFG_H
