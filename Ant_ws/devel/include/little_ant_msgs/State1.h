// Generated by gencpp from file little_ant_msgs/State1.msg
// DO NOT EDIT!


#ifndef LITTLE_ANT_MSGS_MESSAGE_STATE1_H
#define LITTLE_ANT_MSGS_MESSAGE_STATE1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace little_ant_msgs
{
template <class ContainerAllocator>
struct State1_
{
  typedef State1_<ContainerAllocator> Type;

  State1_()
    : header()
    , act_gear(0)
    , accel_pedal_position(0.0)
    , brake_pedal(0)
    , accel_pedal_position_valid(false)
    , act_gear_valid(false)
    , brake_pedal_valid(false)
    , vehicle_ready(false)
    , driverless_mode(false)  {
    }
  State1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , act_gear(0)
    , accel_pedal_position(0.0)
    , brake_pedal(0)
    , accel_pedal_position_valid(false)
    , act_gear_valid(false)
    , brake_pedal_valid(false)
    , vehicle_ready(false)
    , driverless_mode(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _act_gear_type;
  _act_gear_type act_gear;

   typedef float _accel_pedal_position_type;
  _accel_pedal_position_type accel_pedal_position;

   typedef uint8_t _brake_pedal_type;
  _brake_pedal_type brake_pedal;

   typedef uint8_t _accel_pedal_position_valid_type;
  _accel_pedal_position_valid_type accel_pedal_position_valid;

   typedef uint8_t _act_gear_valid_type;
  _act_gear_valid_type act_gear_valid;

   typedef uint8_t _brake_pedal_valid_type;
  _brake_pedal_valid_type brake_pedal_valid;

   typedef uint8_t _vehicle_ready_type;
  _vehicle_ready_type vehicle_ready;

   typedef uint8_t _driverless_mode_type;
  _driverless_mode_type driverless_mode;



  enum {
    GEAR_DRIVE = 11u,
    GEAR_NEUTRAL = 12u,
    GEAR_REVERSE = 13u,
  };


  typedef boost::shared_ptr< ::little_ant_msgs::State1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::little_ant_msgs::State1_<ContainerAllocator> const> ConstPtr;

}; // struct State1_

typedef ::little_ant_msgs::State1_<std::allocator<void> > State1;

typedef boost::shared_ptr< ::little_ant_msgs::State1 > State1Ptr;
typedef boost::shared_ptr< ::little_ant_msgs::State1 const> State1ConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::little_ant_msgs::State1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::little_ant_msgs::State1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace little_ant_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'little_ant_msgs': ['/home/seu-lc/v2v_exp-gps-ctrl-thu-/Ant_ws/src/little_ant_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::State1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::State1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::State1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::State1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::State1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::State1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::little_ant_msgs::State1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d700876b21c15951961ee3bec1bee8b6";
  }

  static const char* value(const ::little_ant_msgs::State1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd700876b21c15951ULL;
  static const uint64_t static_value2 = 0x961ee3bec1bee8b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::little_ant_msgs::State1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "little_ant_msgs/State1";
  }

  static const char* value(const ::little_ant_msgs::State1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::little_ant_msgs::State1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#VCU_8 0x151\n\
\n\
std_msgs/Header header\n\
\n\
uint8 GEAR_DRIVE   = 11\n\
uint8 GEAR_NEUTRAL = 12\n\
uint8 GEAR_REVERSE = 13\n\
\n\
uint8 act_gear\n\
float32 accel_pedal_position\n\
uint8 brake_pedal\n\
bool accel_pedal_position_valid\n\
bool act_gear_valid\n\
bool brake_pedal_valid\n\
bool vehicle_ready\n\
bool driverless_mode\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::little_ant_msgs::State1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::little_ant_msgs::State1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.act_gear);
      stream.next(m.accel_pedal_position);
      stream.next(m.brake_pedal);
      stream.next(m.accel_pedal_position_valid);
      stream.next(m.act_gear_valid);
      stream.next(m.brake_pedal_valid);
      stream.next(m.vehicle_ready);
      stream.next(m.driverless_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::little_ant_msgs::State1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::little_ant_msgs::State1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "act_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.act_gear);
    s << indent << "accel_pedal_position: ";
    Printer<float>::stream(s, indent + "  ", v.accel_pedal_position);
    s << indent << "brake_pedal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_pedal);
    s << indent << "accel_pedal_position_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accel_pedal_position_valid);
    s << indent << "act_gear_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.act_gear_valid);
    s << indent << "brake_pedal_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_pedal_valid);
    s << indent << "vehicle_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_ready);
    s << indent << "driverless_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driverless_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LITTLE_ANT_MSGS_MESSAGE_STATE1_H
