// Generated by gencpp from file common_msgs/controllon.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_CONTROLLON_H
#define COMMON_MSGS_MESSAGE_CONTROLLON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct controllon_
{
  typedef controllon_<ContainerAllocator> Type;

  controllon_()
    : method(0)
    , pedal(0)
    , mode(0)
    , objdis(0.0)
    , objrel(0.0)
    , parkdis(0.0)
    , isvalid(0)
    , geer(0)
    , timestamp(0)
    , gasPedal(0)
    , brakePedal(0)
    , targetSpeed(0)  {
    }
  controllon_(const ContainerAllocator& _alloc)
    : method(0)
    , pedal(0)
    , mode(0)
    , objdis(0.0)
    , objrel(0.0)
    , parkdis(0.0)
    , isvalid(0)
    , geer(0)
    , timestamp(0)
    , gasPedal(0)
    , brakePedal(0)
    , targetSpeed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _method_type;
  _method_type method;

   typedef int8_t _pedal_type;
  _pedal_type pedal;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef float _objdis_type;
  _objdis_type objdis;

   typedef float _objrel_type;
  _objrel_type objrel;

   typedef float _parkdis_type;
  _parkdis_type parkdis;

   typedef uint8_t _isvalid_type;
  _isvalid_type isvalid;

   typedef uint8_t _geer_type;
  _geer_type geer;

   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _gasPedal_type;
  _gasPedal_type gasPedal;

   typedef uint8_t _brakePedal_type;
  _brakePedal_type brakePedal;

   typedef uint8_t _targetSpeed_type;
  _targetSpeed_type targetSpeed;





  typedef boost::shared_ptr< ::common_msgs::controllon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::controllon_<ContainerAllocator> const> ConstPtr;

}; // struct controllon_

typedef ::common_msgs::controllon_<std::allocator<void> > controllon;

typedef boost::shared_ptr< ::common_msgs::controllon > controllonPtr;
typedef boost::shared_ptr< ::common_msgs::controllon const> controllonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::controllon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::controllon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/sunhao/prog/wild/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::controllon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::controllon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::controllon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::controllon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::controllon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::controllon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::controllon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50c02c1f1bee67af253cc975ea95407b";
  }

  static const char* value(const ::common_msgs::controllon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50c02c1f1bee67afULL;
  static const uint64_t static_value2 = 0x253cc975ea95407bULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::controllon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/controllon";
  }

  static const char* value(const ::common_msgs::controllon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::controllon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8    method     #使能位\n\
int8     pedal      #输出量\n\
uint8    mode       #mode\n\
float32  objdis     #\n\
float32  objrel     #\n\
float32  parkdis\n\
uint8    isvalid    #有效位\n\
uint8    geer       #\n\
int64    timestamp  #时间戳 \n\
uint8    gasPedal\n\
uint8    brakePedal\n\
uint8    targetSpeed\n\
";
  }

  static const char* value(const ::common_msgs::controllon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::controllon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.method);
      stream.next(m.pedal);
      stream.next(m.mode);
      stream.next(m.objdis);
      stream.next(m.objrel);
      stream.next(m.parkdis);
      stream.next(m.isvalid);
      stream.next(m.geer);
      stream.next(m.timestamp);
      stream.next(m.gasPedal);
      stream.next(m.brakePedal);
      stream.next(m.targetSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controllon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::controllon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::controllon_<ContainerAllocator>& v)
  {
    s << indent << "method: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.method);
    s << indent << "pedal: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pedal);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "objdis: ";
    Printer<float>::stream(s, indent + "  ", v.objdis);
    s << indent << "objrel: ";
    Printer<float>::stream(s, indent + "  ", v.objrel);
    s << indent << "parkdis: ";
    Printer<float>::stream(s, indent + "  ", v.parkdis);
    s << indent << "isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isvalid);
    s << indent << "geer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.geer);
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "gasPedal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gasPedal);
    s << indent << "brakePedal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brakePedal);
    s << indent << "targetSpeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.targetSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_CONTROLLON_H
