// Generated by gencpp from file perception_msgs/GlobalPathIndex.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_GLOBALPATHINDEX_H
#define PERCEPTION_MSGS_MESSAGE_GLOBALPATHINDEX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct GlobalPathIndex_
{
  typedef GlobalPathIndex_<ContainerAllocator> Type;

  GlobalPathIndex_()
    : start_section(0)
    , start_lane(0)
    , start_pt(0)
    , topo()
    , goal_section(0)
    , goal_lane(0)
    , goal_pt(0)  {
    }
  GlobalPathIndex_(const ContainerAllocator& _alloc)
    : start_section(0)
    , start_lane(0)
    , start_pt(0)
    , topo(_alloc)
    , goal_section(0)
    , goal_lane(0)
    , goal_pt(0)  {
  (void)_alloc;
    }



   typedef int32_t _start_section_type;
  _start_section_type start_section;

   typedef int32_t _start_lane_type;
  _start_lane_type start_lane;

   typedef int32_t _start_pt_type;
  _start_pt_type start_pt;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _topo_type;
  _topo_type topo;

   typedef int32_t _goal_section_type;
  _goal_section_type goal_section;

   typedef int32_t _goal_lane_type;
  _goal_lane_type goal_lane;

   typedef int32_t _goal_pt_type;
  _goal_pt_type goal_pt;





  typedef boost::shared_ptr< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalPathIndex_

typedef ::perception_msgs::GlobalPathIndex_<std::allocator<void> > GlobalPathIndex;

typedef boost::shared_ptr< ::perception_msgs::GlobalPathIndex > GlobalPathIndexPtr;
typedef boost::shared_ptr< ::perception_msgs::GlobalPathIndex const> GlobalPathIndexConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::GlobalPathIndex_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/sunhao/wild/src/perception_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d5f95ec9e9a5e5dadbfd38059134fcf";
  }

  static const char* value(const ::perception_msgs::GlobalPathIndex_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d5f95ec9e9a5e5dULL;
  static const uint64_t static_value2 = 0xadbfd38059134fcfULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/GlobalPathIndex";
  }

  static const char* value(const ::perception_msgs::GlobalPathIndex_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
\n\
int32 start_section\n\
int32 start_lane\n\
int32 start_pt\n\
\n\
#########################\n\
\n\
int32[] topo\n\
\n\
#########################\n\
int32 goal_section\n\
int32 goal_lane\n\
int32 goal_pt\n\
\n\
";
  }

  static const char* value(const ::perception_msgs::GlobalPathIndex_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_section);
      stream.next(m.start_lane);
      stream.next(m.start_pt);
      stream.next(m.topo);
      stream.next(m.goal_section);
      stream.next(m.goal_lane);
      stream.next(m.goal_pt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalPathIndex_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::GlobalPathIndex_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::GlobalPathIndex_<ContainerAllocator>& v)
  {
    s << indent << "start_section: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_section);
    s << indent << "start_lane: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_lane);
    s << indent << "start_pt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_pt);
    s << indent << "topo[]" << std::endl;
    for (size_t i = 0; i < v.topo.size(); ++i)
    {
      s << indent << "  topo[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.topo[i]);
    }
    s << indent << "goal_section: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_section);
    s << indent << "goal_lane: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_lane);
    s << indent << "goal_pt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_pt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_GLOBALPATHINDEX_H
