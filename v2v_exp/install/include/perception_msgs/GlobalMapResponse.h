// Generated by gencpp from file perception_msgs/GlobalMapResponse.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_GLOBALMAPRESPONSE_H
#define PERCEPTION_MSGS_MESSAGE_GLOBALMAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/Map.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct GlobalMapResponse_
{
  typedef GlobalMapResponse_<ContainerAllocator> Type;

  GlobalMapResponse_()
    : map()  {
    }
  GlobalMapResponse_(const ContainerAllocator& _alloc)
    : map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::perception_msgs::Map_<ContainerAllocator>  _map_type;
  _map_type map;





  typedef boost::shared_ptr< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalMapResponse_

typedef ::perception_msgs::GlobalMapResponse_<std::allocator<void> > GlobalMapResponse;

typedef boost::shared_ptr< ::perception_msgs::GlobalMapResponse > GlobalMapResponsePtr;
typedef boost::shared_ptr< ::perception_msgs::GlobalMapResponse const> GlobalMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::GlobalMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/sunhao/prog/wild/src/perception_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a170b31a8e9ad04adc0dd48f6ea17a9e";
  }

  static const char* value(const ::perception_msgs::GlobalMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa170b31a8e9ad04aULL;
  static const uint64_t static_value2 = 0xdc0dd48f6ea17a9eULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/GlobalMapResponse";
  }

  static const char* value(const ::perception_msgs::GlobalMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/Map map\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/Map\n\
#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
\n\
std_msgs/Header header\n\
\n\
geometry_msgs/Point origin_utm_pt\n\
\n\
perception_msgs/Section[] sections\n\
\n\
std_msgs/String uuid\n\
\n\
int32 id\n\
# -1 : closed map\n\
# 0 : simple map\n\
# 1: topo map\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: perception_msgs/Section\n\
#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
\n\
\n\
perception_msgs/Line[] lanes\n\
\n\
int32 direction_mode\n\
\n\
#############################\n\
#int32 id\n\
std_msgs/String uuid\n\
\n\
#############################\n\
\n\
std_msgs/String[] to_section_uuid\n\
std_msgs/String[] from_section_uuid\n\
\n\
\n\
std_msgs/String[] to_lane_uuid\n\
std_msgs/String[] from_lane_uuid\n\
\n\
\n\
std_msgs/String[] to_pt_uuid\n\
std_msgs/String[] from_pt_uuid\n\
\n\
#int32[] to_pt_id\n\
#int32[] from_pt_id\n\
\n\
#############################\n\
\n\
float32 length\n\
float32 highest_speed\n\
float32 traffic_cost\n\
\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/Line\n\
#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
perception_msgs/Point[] pts\n\
\n\
#############################\n\
int8 is_main # Is the lane center lane of this section\n\
float64 offset\n\
float64 width\n\
\n\
#############################\n\
\n\
#int32 id\n\
std_msgs/String uuid\n\
\n\
#############################\n\
\n\
std_msgs/String main_uuid\n\
\n\
#int32 left_id\n\
std_msgs/String left_uuid\n\
\n\
#int32 right_id\n\
std_msgs/String right_uuid\n\
\n\
\n\
#############################\n\
\n\
#int32 section_id\n\
std_msgs/String section_uuid\n\
\n\
#############################\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/Point\n\
#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 s\n\
float64 cuv\n\
float64 heading\n\
float64 speed\n\
float64 speedkmh\n\
\n\
############################\n\
\n\
\n\
int32 rtk_mode # 0: 无影响 1： Not rtk stop\n\
int32 driving_mode # acc or collision avoidance\n\
int32 special_mode  #\n\
\n\
####################################33\n\
int32 obs_search_strategy  # 0: donot search obs\n\
int32 speed_mode  #\n\
int32 obs_strategy  #\n\
int32 follow_strategy  #\n\
int32 cross_option  #\n\
int32 reserved_option  #\n\
\n\
\n\
\n\
############################\n\
\n\
#int32 id\n\
std_msgs/String uuid\n\
\n\
#############################\n\
\n\
#int32 line_id\n\
std_msgs/String lane_uuid\n\
\n\
#############################\n\
\n\
#int32 section_id\n\
std_msgs/String section_uuid\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::perception_msgs::GlobalMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::GlobalMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::GlobalMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "map: ";
    s << std::endl;
    Printer< ::perception_msgs::Map_<ContainerAllocator> >::stream(s, indent + "  ", v.map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_GLOBALMAPRESPONSE_H
