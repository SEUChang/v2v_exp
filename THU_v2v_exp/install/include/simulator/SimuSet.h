// Generated by gencpp from file simulator/SimuSet.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_SIMUSET_H
#define SIMULATOR_MESSAGE_SIMUSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace simulator
{
template <class ContainerAllocator>
struct SimuSet_
{
  typedef SimuSet_<ContainerAllocator> Type;

  SimuSet_()
    : start_or_pause(false)
    , reset(false)
    , pose_init(false)
    , init_pt()
    , init_heading(0.0)
    , init_speed(0.0)
    , rtk_status(0)  {
    }
  SimuSet_(const ContainerAllocator& _alloc)
    : start_or_pause(false)
    , reset(false)
    , pose_init(false)
    , init_pt(_alloc)
    , init_heading(0.0)
    , init_speed(0.0)
    , rtk_status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _start_or_pause_type;
  _start_or_pause_type start_or_pause;

   typedef uint8_t _reset_type;
  _reset_type reset;

   typedef uint8_t _pose_init_type;
  _pose_init_type pose_init;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _init_pt_type;
  _init_pt_type init_pt;

   typedef float _init_heading_type;
  _init_heading_type init_heading;

   typedef float _init_speed_type;
  _init_speed_type init_speed;

   typedef int8_t _rtk_status_type;
  _rtk_status_type rtk_status;





  typedef boost::shared_ptr< ::simulator::SimuSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::SimuSet_<ContainerAllocator> const> ConstPtr;

}; // struct SimuSet_

typedef ::simulator::SimuSet_<std::allocator<void> > SimuSet;

typedef boost::shared_ptr< ::simulator::SimuSet > SimuSetPtr;
typedef boost::shared_ptr< ::simulator::SimuSet const> SimuSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::SimuSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::SimuSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'simulator': ['/home/sunhao/wild/src/simulator/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simulator::SimuSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::SimuSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::SimuSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::SimuSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::SimuSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::SimuSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::SimuSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f488552fec6ede53d99f875862e60d0";
  }

  static const char* value(const ::simulator::SimuSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f488552fec6ede5ULL;
  static const uint64_t static_value2 = 0x3d99f875862e60d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::SimuSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/SimuSet";
  }

  static const char* value(const ::simulator::SimuSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::SimuSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n\
\n\
#\n\
\n\
bool start_or_pause\n\
bool reset\n\
\n\
\n\
\n\
bool pose_init\n\
geometry_msgs/Point init_pt\n\
float32 init_heading\n\
float32 init_speed\n\
\n\
\n\
int8 rtk_status\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::simulator::SimuSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::SimuSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_or_pause);
      stream.next(m.reset);
      stream.next(m.pose_init);
      stream.next(m.init_pt);
      stream.next(m.init_heading);
      stream.next(m.init_speed);
      stream.next(m.rtk_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimuSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::SimuSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::SimuSet_<ContainerAllocator>& v)
  {
    s << indent << "start_or_pause: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_or_pause);
    s << indent << "reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset);
    s << indent << "pose_init: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose_init);
    s << indent << "init_pt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.init_pt);
    s << indent << "init_heading: ";
    Printer<float>::stream(s, indent + "  ", v.init_heading);
    s << indent << "init_speed: ";
    Printer<float>::stream(s, indent + "  ", v.init_speed);
    s << indent << "rtk_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rtk_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_SIMUSET_H
