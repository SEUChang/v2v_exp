// Generated by gencpp from file gnss_msgs/GPRMC.msg
// DO NOT EDIT!


#ifndef GNSS_MSGS_MESSAGE_GPRMC_H
#define GNSS_MSGS_MESSAGE_GPRMC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gnss_msgs
{
template <class ContainerAllocator>
struct GPRMC_
{
  typedef GPRMC_<ContainerAllocator> Type;

  GPRMC_()
    : header()
    , message_id()
    , utc_seconds(0.0)
    , position_status()
    , lat(0.0)
    , lon(0.0)
    , lat_dir()
    , lon_dir()
    , speed(0.0)
    , heading(0.0)
    , track(0.0)
    , date()
    , mag_var(0.0)
    , mag_var_direction()
    , mode_indicator()  {
    }
  GPRMC_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_id(_alloc)
    , utc_seconds(0.0)
    , position_status(_alloc)
    , lat(0.0)
    , lon(0.0)
    , lat_dir(_alloc)
    , lon_dir(_alloc)
    , speed(0.0)
    , heading(0.0)
    , track(0.0)
    , date(_alloc)
    , mag_var(0.0)
    , mag_var_direction(_alloc)
    , mode_indicator(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_id_type;
  _message_id_type message_id;

   typedef double _utc_seconds_type;
  _utc_seconds_type utc_seconds;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _position_status_type;
  _position_status_type position_status;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lat_dir_type;
  _lat_dir_type lat_dir;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lon_dir_type;
  _lon_dir_type lon_dir;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _track_type;
  _track_type track;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef float _mag_var_type;
  _mag_var_type mag_var;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mag_var_direction_type;
  _mag_var_direction_type mag_var_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_indicator_type;
  _mode_indicator_type mode_indicator;





  typedef boost::shared_ptr< ::gnss_msgs::GPRMC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_msgs::GPRMC_<ContainerAllocator> const> ConstPtr;

}; // struct GPRMC_

typedef ::gnss_msgs::GPRMC_<std::allocator<void> > GPRMC;

typedef boost::shared_ptr< ::gnss_msgs::GPRMC > GPRMCPtr;
typedef boost::shared_ptr< ::gnss_msgs::GPRMC const> GPRMCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_msgs::GPRMC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_msgs::GPRMC_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gnss_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'gnss_msgs': ['/home/sunhao/prog/wild/src/gnss_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gnss_msgs::GPRMC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_msgs::GPRMC_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_msgs::GPRMC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_msgs::GPRMC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_msgs::GPRMC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_msgs::GPRMC_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_msgs::GPRMC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f6fb81b50ce6974426f8703c714b29c";
  }

  static const char* value(const ::gnss_msgs::GPRMC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f6fb81b50ce6974ULL;
  static const uint64_t static_value2 = 0x426f8703c714b29cULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_msgs::GPRMC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_msgs/GPRMC";
  }

  static const char* value(const ::gnss_msgs::GPRMC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_msgs::GPRMC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message from GPRMC NMEA String\n\
Header header\n\
\n\
string message_id\n\
\n\
float64 utc_seconds\n\
string position_status\n\
\n\
float64 lat\n\
float64 lon\n\
\n\
string lat_dir\n\
string lon_dir\n\
\n\
float32 speed\n\
float32 heading\n\
float32 track\n\
string date\n\
float32 mag_var\n\
string mag_var_direction\n\
string mode_indicator\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::gnss_msgs::GPRMC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_msgs::GPRMC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_id);
      stream.next(m.utc_seconds);
      stream.next(m.position_status);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.lat_dir);
      stream.next(m.lon_dir);
      stream.next(m.speed);
      stream.next(m.heading);
      stream.next(m.track);
      stream.next(m.date);
      stream.next(m.mag_var);
      stream.next(m.mag_var_direction);
      stream.next(m.mode_indicator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPRMC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_msgs::GPRMC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_msgs::GPRMC_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message_id);
    s << indent << "utc_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.utc_seconds);
    s << indent << "position_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position_status);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat_dir: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lat_dir);
    s << indent << "lon_dir: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lon_dir);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "track: ";
    Printer<float>::stream(s, indent + "  ", v.track);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "mag_var: ";
    Printer<float>::stream(s, indent + "  ", v.mag_var);
    s << indent << "mag_var_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mag_var_direction);
    s << indent << "mode_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode_indicator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_MSGS_MESSAGE_GPRMC_H
