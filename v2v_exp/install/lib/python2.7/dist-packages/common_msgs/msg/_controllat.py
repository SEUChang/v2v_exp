# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/controllat.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class controllat(genpy.Message):
  _md5sum = "0c1639e4c92c3d89dd4c0c14d08ef839"
  _type = "common_msgs/controllat"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8    epsmethod   #使能位
int16    epsangle    #目标角度
float32  limitspeed  #限速
float32  epstorque   #扭矩
uint8    lights      #目标灯光
uint8    isvalid     #有效位
int16    deviation   #deviation
int64    timestamp   #时间戳"""
  __slots__ = ['epsmethod','epsangle','limitspeed','epstorque','lights','isvalid','deviation','timestamp']
  _slot_types = ['uint8','int16','float32','float32','uint8','uint8','int16','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       epsmethod,epsangle,limitspeed,epstorque,lights,isvalid,deviation,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controllat, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.epsmethod is None:
        self.epsmethod = 0
      if self.epsangle is None:
        self.epsangle = 0
      if self.limitspeed is None:
        self.limitspeed = 0.
      if self.epstorque is None:
        self.epstorque = 0.
      if self.lights is None:
        self.lights = 0
      if self.isvalid is None:
        self.isvalid = 0
      if self.deviation is None:
        self.deviation = 0
      if self.timestamp is None:
        self.timestamp = 0
    else:
      self.epsmethod = 0
      self.epsangle = 0
      self.limitspeed = 0.
      self.epstorque = 0.
      self.lights = 0
      self.isvalid = 0
      self.deviation = 0
      self.timestamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bh2f2Bhq().pack(_x.epsmethod, _x.epsangle, _x.limitspeed, _x.epstorque, _x.lights, _x.isvalid, _x.deviation, _x.timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.epsmethod, _x.epsangle, _x.limitspeed, _x.epstorque, _x.lights, _x.isvalid, _x.deviation, _x.timestamp,) = _get_struct_Bh2f2Bhq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bh2f2Bhq().pack(_x.epsmethod, _x.epsangle, _x.limitspeed, _x.epstorque, _x.lights, _x.isvalid, _x.deviation, _x.timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.epsmethod, _x.epsangle, _x.limitspeed, _x.epstorque, _x.lights, _x.isvalid, _x.deviation, _x.timestamp,) = _get_struct_Bh2f2Bhq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bh2f2Bhq = None
def _get_struct_Bh2f2Bhq():
    global _struct_Bh2f2Bhq
    if _struct_Bh2f2Bhq is None:
        _struct_Bh2f2Bhq = struct.Struct("<Bh2f2Bhq")
    return _struct_Bh2f2Bhq
