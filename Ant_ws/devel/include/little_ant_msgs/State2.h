// Generated by gencpp from file little_ant_msgs/State2.msg
// DO NOT EDIT!


#ifndef LITTLE_ANT_MSGS_MESSAGE_STATE2_H
#define LITTLE_ANT_MSGS_MESSAGE_STATE2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace little_ant_msgs
{
template <class ContainerAllocator>
struct State2_
{
  typedef State2_<ContainerAllocator> Type;

  State2_()
    : header()
    , wheel_speed_FL(0.0)
    , wheel_speed_FR(0.0)
    , wheel_speed_RL(0.0)
    , wheel_speed_RR(0.0)
    , vehicle_speed(0.0)
    , wheel_speed_FL_valid(false)
    , wheel_speed_FR_valid(false)
    , wheel_speed_RL_valid(false)
    , wheel_speed_RR_valid(false)  {
    }
  State2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , wheel_speed_FL(0.0)
    , wheel_speed_FR(0.0)
    , wheel_speed_RL(0.0)
    , wheel_speed_RR(0.0)
    , vehicle_speed(0.0)
    , wheel_speed_FL_valid(false)
    , wheel_speed_FR_valid(false)
    , wheel_speed_RL_valid(false)
    , wheel_speed_RR_valid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _wheel_speed_FL_type;
  _wheel_speed_FL_type wheel_speed_FL;

   typedef float _wheel_speed_FR_type;
  _wheel_speed_FR_type wheel_speed_FR;

   typedef float _wheel_speed_RL_type;
  _wheel_speed_RL_type wheel_speed_RL;

   typedef float _wheel_speed_RR_type;
  _wheel_speed_RR_type wheel_speed_RR;

   typedef float _vehicle_speed_type;
  _vehicle_speed_type vehicle_speed;

   typedef uint8_t _wheel_speed_FL_valid_type;
  _wheel_speed_FL_valid_type wheel_speed_FL_valid;

   typedef uint8_t _wheel_speed_FR_valid_type;
  _wheel_speed_FR_valid_type wheel_speed_FR_valid;

   typedef uint8_t _wheel_speed_RL_valid_type;
  _wheel_speed_RL_valid_type wheel_speed_RL_valid;

   typedef uint8_t _wheel_speed_RR_valid_type;
  _wheel_speed_RR_valid_type wheel_speed_RR_valid;





  typedef boost::shared_ptr< ::little_ant_msgs::State2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::little_ant_msgs::State2_<ContainerAllocator> const> ConstPtr;

}; // struct State2_

typedef ::little_ant_msgs::State2_<std::allocator<void> > State2;

typedef boost::shared_ptr< ::little_ant_msgs::State2 > State2Ptr;
typedef boost::shared_ptr< ::little_ant_msgs::State2 const> State2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::little_ant_msgs::State2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::little_ant_msgs::State2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace little_ant_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'little_ant_msgs': ['/home/seu-lc/v2v_exp-gps-ctrl-thu-/Ant_ws/src/little_ant_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::State2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::State2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::State2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::State2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::State2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::State2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::little_ant_msgs::State2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e1f5bf0137abb4b497e51cd65566aa6";
  }

  static const char* value(const ::little_ant_msgs::State2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e1f5bf0137abb4bULL;
  static const uint64_t static_value2 = 0x497e51cd65566aa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::little_ant_msgs::State2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "little_ant_msgs/State2";
  }

  static const char* value(const ::little_ant_msgs::State2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::little_ant_msgs::State2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#VCU_ABS_1  0x300\n\
\n\
std_msgs/Header header\n\
\n\
#  km/s\n\
float32 wheel_speed_FL\n\
float32 wheel_speed_FR\n\
float32 wheel_speed_RL\n\
float32 wheel_speed_RR\n\
\n\
float32 vehicle_speed   # m/s\n\
\n\
bool wheel_speed_FL_valid\n\
bool wheel_speed_FR_valid\n\
bool wheel_speed_RL_valid\n\
bool wheel_speed_RR_valid\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::little_ant_msgs::State2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::little_ant_msgs::State2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.wheel_speed_FL);
      stream.next(m.wheel_speed_FR);
      stream.next(m.wheel_speed_RL);
      stream.next(m.wheel_speed_RR);
      stream.next(m.vehicle_speed);
      stream.next(m.wheel_speed_FL_valid);
      stream.next(m.wheel_speed_FR_valid);
      stream.next(m.wheel_speed_RL_valid);
      stream.next(m.wheel_speed_RR_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::little_ant_msgs::State2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::little_ant_msgs::State2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "wheel_speed_FL: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_FL);
    s << indent << "wheel_speed_FR: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_FR);
    s << indent << "wheel_speed_RL: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_RL);
    s << indent << "wheel_speed_RR: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_RR);
    s << indent << "vehicle_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "wheel_speed_FL_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speed_FL_valid);
    s << indent << "wheel_speed_FR_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speed_FR_valid);
    s << indent << "wheel_speed_RL_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speed_RL_valid);
    s << indent << "wheel_speed_RR_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speed_RR_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LITTLE_ANT_MSGS_MESSAGE_STATE2_H
