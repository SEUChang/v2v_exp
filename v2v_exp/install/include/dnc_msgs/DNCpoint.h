// Generated by gencpp from file dnc_msgs/DNCpoint.msg
// DO NOT EDIT!


#ifndef DNC_MSGS_MESSAGE_DNCPOINT_H
#define DNC_MSGS_MESSAGE_DNCPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dnc_msgs
{
template <class ContainerAllocator>
struct DNCpoint_
{
  typedef DNCpoint_<ContainerAllocator> Type;

  DNCpoint_()
    : x(0.0)
    , y(0.0)
    , s(0.0)
    , cuv(0.0)
    , heading(0.0)
    , speed(0.0)
    , h(0.0)  {
    }
  DNCpoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , s(0.0)
    , cuv(0.0)
    , heading(0.0)
    , speed(0.0)
    , h(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _s_type;
  _s_type s;

   typedef double _cuv_type;
  _cuv_type cuv;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _speed_type;
  _speed_type speed;

   typedef float _h_type;
  _h_type h;





  typedef boost::shared_ptr< ::dnc_msgs::DNCpoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dnc_msgs::DNCpoint_<ContainerAllocator> const> ConstPtr;

}; // struct DNCpoint_

typedef ::dnc_msgs::DNCpoint_<std::allocator<void> > DNCpoint;

typedef boost::shared_ptr< ::dnc_msgs::DNCpoint > DNCpointPtr;
typedef boost::shared_ptr< ::dnc_msgs::DNCpoint const> DNCpointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dnc_msgs::DNCpoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dnc_msgs::DNCpoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dnc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dnc_msgs': ['/home/sunhao/prog/wild/src/dnc_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dnc_msgs::DNCpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dnc_msgs::DNCpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dnc_msgs::DNCpoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c088520e7bfc26b1a95305c33067189";
  }

  static const char* value(const ::dnc_msgs::DNCpoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c088520e7bfc26bULL;
  static const uint64_t static_value2 = 0x1a95305c33067189ULL;
};

template<class ContainerAllocator>
struct DataType< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dnc_msgs/DNCpoint";
  }

  static const char* value(const ::dnc_msgs::DNCpoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
\n\
float64 x\n\
float64 y\n\
float64 s\n\
\n\
float64 cuv\n\
float64 heading\n\
float64 speed\n\
\n\
float32 h\n\
";
  }

  static const char* value(const ::dnc_msgs::DNCpoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.s);
      stream.next(m.cuv);
      stream.next(m.heading);
      stream.next(m.speed);
      stream.next(m.h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DNCpoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dnc_msgs::DNCpoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dnc_msgs::DNCpoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "cuv: ";
    Printer<double>::stream(s, indent + "  ", v.cuv);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DNC_MSGS_MESSAGE_DNCPOINT_H
