// Generated by gencpp from file common_msgs/roadpoint.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_ROADPOINT_H
#define COMMON_MSGS_MESSAGE_ROADPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct roadpoint_
{
  typedef roadpoint_<ContainerAllocator> Type;

  roadpoint_()
    : x(0)
    , y(0)
    , gx(0)
    , gy(0)
    , roadtype(0)
    , lanetype(0)
    , heading(0.0)
    , curvature(0.0)  {
    }
  roadpoint_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , gx(0)
    , gy(0)
    , roadtype(0)
    , lanetype(0)
    , heading(0.0)
    , curvature(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef int32_t _gx_type;
  _gx_type gx;

   typedef int32_t _gy_type;
  _gy_type gy;

   typedef uint8_t _roadtype_type;
  _roadtype_type roadtype;

   typedef uint8_t _lanetype_type;
  _lanetype_type lanetype;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _curvature_type;
  _curvature_type curvature;





  typedef boost::shared_ptr< ::common_msgs::roadpoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::roadpoint_<ContainerAllocator> const> ConstPtr;

}; // struct roadpoint_

typedef ::common_msgs::roadpoint_<std::allocator<void> > roadpoint;

typedef boost::shared_ptr< ::common_msgs::roadpoint > roadpointPtr;
typedef boost::shared_ptr< ::common_msgs::roadpoint const> roadpointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::roadpoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::roadpoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/sunhao/prog/wild/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::roadpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::roadpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::roadpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::roadpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::roadpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::roadpoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::roadpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5188723d8908b67bd1c8e04daf63a8f8";
  }

  static const char* value(const ::common_msgs::roadpoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5188723d8908b67bULL;
  static const uint64_t static_value2 = 0xd1c8e04daf63a8f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::roadpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/roadpoint";
  }

  static const char* value(const ::common_msgs::roadpoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::roadpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 x                  #局部横坐标   cm\n\
int16 y                  #局部纵坐标   cm\n\
int32 gx                 #全局横坐标   cm\n\
int32 gy                 #全局纵坐标   cm\n\
uint8 roadtype           #道路属性\n\
uint8 lanetype           #当前车道|总车道(4|4)\n\
float32 heading          #heading\n\
float32 curvature\n\
";
  }

  static const char* value(const ::common_msgs::roadpoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::roadpoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.roadtype);
      stream.next(m.lanetype);
      stream.next(m.heading);
      stream.next(m.curvature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct roadpoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::roadpoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::roadpoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "gx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gy);
    s << indent << "roadtype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadtype);
    s << indent << "lanetype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lanetype);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_ROADPOINT_H
