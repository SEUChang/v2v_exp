# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator/SimuSet.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SimuSet(genpy.Message):
  _md5sum = "1f488552fec6ede53d99f875862e60d0"
  _type = "simulator/SimuSet"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#

#

bool start_or_pause
bool reset



bool pose_init
geometry_msgs/Point init_pt
float32 init_heading
float32 init_speed


int8 rtk_status
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['start_or_pause','reset','pose_init','init_pt','init_heading','init_speed','rtk_status']
  _slot_types = ['bool','bool','bool','geometry_msgs/Point','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_or_pause,reset,pose_init,init_pt,init_heading,init_speed,rtk_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimuSet, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_or_pause is None:
        self.start_or_pause = False
      if self.reset is None:
        self.reset = False
      if self.pose_init is None:
        self.pose_init = False
      if self.init_pt is None:
        self.init_pt = geometry_msgs.msg.Point()
      if self.init_heading is None:
        self.init_heading = 0.
      if self.init_speed is None:
        self.init_speed = 0.
      if self.rtk_status is None:
        self.rtk_status = 0
    else:
      self.start_or_pause = False
      self.reset = False
      self.pose_init = False
      self.init_pt = geometry_msgs.msg.Point()
      self.init_heading = 0.
      self.init_speed = 0.
      self.rtk_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B3d2fb().pack(_x.start_or_pause, _x.reset, _x.pose_init, _x.init_pt.x, _x.init_pt.y, _x.init_pt.z, _x.init_heading, _x.init_speed, _x.rtk_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.init_pt is None:
        self.init_pt = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.start_or_pause, _x.reset, _x.pose_init, _x.init_pt.x, _x.init_pt.y, _x.init_pt.z, _x.init_heading, _x.init_speed, _x.rtk_status,) = _get_struct_3B3d2fb().unpack(str[start:end])
      self.start_or_pause = bool(self.start_or_pause)
      self.reset = bool(self.reset)
      self.pose_init = bool(self.pose_init)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B3d2fb().pack(_x.start_or_pause, _x.reset, _x.pose_init, _x.init_pt.x, _x.init_pt.y, _x.init_pt.z, _x.init_heading, _x.init_speed, _x.rtk_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.init_pt is None:
        self.init_pt = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.start_or_pause, _x.reset, _x.pose_init, _x.init_pt.x, _x.init_pt.y, _x.init_pt.z, _x.init_heading, _x.init_speed, _x.rtk_status,) = _get_struct_3B3d2fb().unpack(str[start:end])
      self.start_or_pause = bool(self.start_or_pause)
      self.reset = bool(self.reset)
      self.pose_init = bool(self.pose_init)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B3d2fb = None
def _get_struct_3B3d2fb():
    global _struct_3B3d2fb
    if _struct_3B3d2fb is None:
        _struct_3B3d2fb = struct.Struct("<3B3d2fb")
    return _struct_3B3d2fb
