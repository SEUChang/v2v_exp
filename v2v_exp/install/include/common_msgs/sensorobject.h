// Generated by gencpp from file common_msgs/sensorobject.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_SENSOROBJECT_H
#define COMMON_MSGS_MESSAGE_SENSOROBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/point3d.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct sensorobject_
{
  typedef sensorobject_<ContainerAllocator> Type;

  sensorobject_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , relspeedy(0.0)
    , relspeedx(0.0)
    , azimuth(0.0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , classification(0)
    , value(0)
    , points()  {
    }
  sensorobject_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , relspeedy(0.0)
    , relspeedx(0.0)
    , azimuth(0.0)
    , width(0.0)
    , length(0.0)
    , height(0.0)
    , classification(0)
    , value(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _relspeedy_type;
  _relspeedy_type relspeedy;

   typedef float _relspeedx_type;
  _relspeedx_type relspeedx;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _width_type;
  _width_type width;

   typedef float _length_type;
  _length_type length;

   typedef float _height_type;
  _height_type height;

   typedef uint8_t _classification_type;
  _classification_type classification;

   typedef uint8_t _value_type;
  _value_type value;

   typedef std::vector< ::common_msgs::point3d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::common_msgs::point3d_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::common_msgs::sensorobject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::sensorobject_<ContainerAllocator> const> ConstPtr;

}; // struct sensorobject_

typedef ::common_msgs::sensorobject_<std::allocator<void> > sensorobject;

typedef boost::shared_ptr< ::common_msgs::sensorobject > sensorobjectPtr;
typedef boost::shared_ptr< ::common_msgs::sensorobject const> sensorobjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::sensorobject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::sensorobject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/sunhao/prog/wild/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::sensorobject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::sensorobject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::sensorobject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::sensorobject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::sensorobject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::sensorobject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::sensorobject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad57f5cd9081dfdd52f43461a66c76f4";
  }

  static const char* value(const ::common_msgs::sensorobject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad57f5cd9081dfddULL;
  static const uint64_t static_value2 = 0x52f43461a66c76f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::sensorobject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/sensorobject";
  }

  static const char* value(const ::common_msgs::sensorobject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::sensorobject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   id                     #跟踪的ID\n\
float32 x                      #横坐标\n\
float32 y                      #纵坐标\n\
float32 relspeedy              #纵轴相对速度\n\
float32 relspeedx              #横轴相对速度\n\
float32 azimuth                #航向\n\
float32 width                  #宽度\n\
float32 length                 #长度\n\
float32 height                 #高度\n\
uint8   classification         #类别\n\
uint8   value                  #置信度\n\
point3d[] points #轮廓点数据 \n\
================================================================================\n\
MSG: common_msgs/point3d\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::common_msgs::sensorobject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::sensorobject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.relspeedy);
      stream.next(m.relspeedx);
      stream.next(m.azimuth);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.height);
      stream.next(m.classification);
      stream.next(m.value);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensorobject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::sensorobject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::sensorobject_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "relspeedy: ";
    Printer<float>::stream(s, indent + "  ", v.relspeedy);
    s << indent << "relspeedx: ";
    Printer<float>::stream(s, indent + "  ", v.relspeedx);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classification);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::point3d_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_SENSOROBJECT_H
