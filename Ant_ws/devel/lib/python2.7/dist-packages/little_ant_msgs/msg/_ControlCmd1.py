# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from little_ant_msgs/ControlCmd1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlCmd1(genpy.Message):
  _md5sum = "f587e931e6927c2a0aadae434268a15b"
  _type = "little_ant_msgs/ControlCmd1"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#IDM_1  0x2C5

bool set_driverlessMode
bool set_remoteStart
bool set_handBrake
bool set_turnLight_R
bool set_turnLight_L
bool set_lowBeam
bool set_reverseLight
bool set_brakeLight
bool set_horn

"""
  __slots__ = ['set_driverlessMode','set_remoteStart','set_handBrake','set_turnLight_R','set_turnLight_L','set_lowBeam','set_reverseLight','set_brakeLight','set_horn']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_driverlessMode,set_remoteStart,set_handBrake,set_turnLight_R,set_turnLight_L,set_lowBeam,set_reverseLight,set_brakeLight,set_horn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlCmd1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.set_driverlessMode is None:
        self.set_driverlessMode = False
      if self.set_remoteStart is None:
        self.set_remoteStart = False
      if self.set_handBrake is None:
        self.set_handBrake = False
      if self.set_turnLight_R is None:
        self.set_turnLight_R = False
      if self.set_turnLight_L is None:
        self.set_turnLight_L = False
      if self.set_lowBeam is None:
        self.set_lowBeam = False
      if self.set_reverseLight is None:
        self.set_reverseLight = False
      if self.set_brakeLight is None:
        self.set_brakeLight = False
      if self.set_horn is None:
        self.set_horn = False
    else:
      self.set_driverlessMode = False
      self.set_remoteStart = False
      self.set_handBrake = False
      self.set_turnLight_R = False
      self.set_turnLight_L = False
      self.set_lowBeam = False
      self.set_reverseLight = False
      self.set_brakeLight = False
      self.set_horn = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.set_driverlessMode, _x.set_remoteStart, _x.set_handBrake, _x.set_turnLight_R, _x.set_turnLight_L, _x.set_lowBeam, _x.set_reverseLight, _x.set_brakeLight, _x.set_horn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.set_driverlessMode, _x.set_remoteStart, _x.set_handBrake, _x.set_turnLight_R, _x.set_turnLight_L, _x.set_lowBeam, _x.set_reverseLight, _x.set_brakeLight, _x.set_horn,) = _get_struct_9B().unpack(str[start:end])
      self.set_driverlessMode = bool(self.set_driverlessMode)
      self.set_remoteStart = bool(self.set_remoteStart)
      self.set_handBrake = bool(self.set_handBrake)
      self.set_turnLight_R = bool(self.set_turnLight_R)
      self.set_turnLight_L = bool(self.set_turnLight_L)
      self.set_lowBeam = bool(self.set_lowBeam)
      self.set_reverseLight = bool(self.set_reverseLight)
      self.set_brakeLight = bool(self.set_brakeLight)
      self.set_horn = bool(self.set_horn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.set_driverlessMode, _x.set_remoteStart, _x.set_handBrake, _x.set_turnLight_R, _x.set_turnLight_L, _x.set_lowBeam, _x.set_reverseLight, _x.set_brakeLight, _x.set_horn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.set_driverlessMode, _x.set_remoteStart, _x.set_handBrake, _x.set_turnLight_R, _x.set_turnLight_L, _x.set_lowBeam, _x.set_reverseLight, _x.set_brakeLight, _x.set_horn,) = _get_struct_9B().unpack(str[start:end])
      self.set_driverlessMode = bool(self.set_driverlessMode)
      self.set_remoteStart = bool(self.set_remoteStart)
      self.set_handBrake = bool(self.set_handBrake)
      self.set_turnLight_R = bool(self.set_turnLight_R)
      self.set_turnLight_L = bool(self.set_turnLight_L)
      self.set_lowBeam = bool(self.set_lowBeam)
      self.set_reverseLight = bool(self.set_reverseLight)
      self.set_brakeLight = bool(self.set_brakeLight)
      self.set_horn = bool(self.set_horn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
