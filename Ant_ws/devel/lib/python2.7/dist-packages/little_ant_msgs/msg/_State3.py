# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from little_ant_msgs/State3.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class State3(genpy.Message):
  _md5sum = "2adb4f3bd0140b3e748f6391b224e7e9"
  _type = "little_ant_msgs/State3"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#ACM_1  0x4D1

std_msgs/Header header

bool driverless_mode

bool turn_light_R

bool turn_light_L

bool parkTail_light

bool high_beam
bool low_beam

bool brake_light
bool horn





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','driverless_mode','turn_light_R','turn_light_L','parkTail_light','high_beam','low_beam','brake_light','horn']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,driverless_mode,turn_light_R,turn_light_L,parkTail_light,high_beam,low_beam,brake_light,horn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State3, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.driverless_mode is None:
        self.driverless_mode = False
      if self.turn_light_R is None:
        self.turn_light_R = False
      if self.turn_light_L is None:
        self.turn_light_L = False
      if self.parkTail_light is None:
        self.parkTail_light = False
      if self.high_beam is None:
        self.high_beam = False
      if self.low_beam is None:
        self.low_beam = False
      if self.brake_light is None:
        self.brake_light = False
      if self.horn is None:
        self.horn = False
    else:
      self.header = std_msgs.msg.Header()
      self.driverless_mode = False
      self.turn_light_R = False
      self.turn_light_L = False
      self.parkTail_light = False
      self.high_beam = False
      self.low_beam = False
      self.brake_light = False
      self.horn = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.driverless_mode, _x.turn_light_R, _x.turn_light_L, _x.parkTail_light, _x.high_beam, _x.low_beam, _x.brake_light, _x.horn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.driverless_mode, _x.turn_light_R, _x.turn_light_L, _x.parkTail_light, _x.high_beam, _x.low_beam, _x.brake_light, _x.horn,) = _get_struct_8B().unpack(str[start:end])
      self.driverless_mode = bool(self.driverless_mode)
      self.turn_light_R = bool(self.turn_light_R)
      self.turn_light_L = bool(self.turn_light_L)
      self.parkTail_light = bool(self.parkTail_light)
      self.high_beam = bool(self.high_beam)
      self.low_beam = bool(self.low_beam)
      self.brake_light = bool(self.brake_light)
      self.horn = bool(self.horn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.driverless_mode, _x.turn_light_R, _x.turn_light_L, _x.parkTail_light, _x.high_beam, _x.low_beam, _x.brake_light, _x.horn))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.driverless_mode, _x.turn_light_R, _x.turn_light_L, _x.parkTail_light, _x.high_beam, _x.low_beam, _x.brake_light, _x.horn,) = _get_struct_8B().unpack(str[start:end])
      self.driverless_mode = bool(self.driverless_mode)
      self.turn_light_R = bool(self.turn_light_R)
      self.turn_light_L = bool(self.turn_light_L)
      self.parkTail_light = bool(self.parkTail_light)
      self.high_beam = bool(self.high_beam)
      self.low_beam = bool(self.low_beam)
      self.brake_light = bool(self.brake_light)
      self.horn = bool(self.horn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
