# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/GlobalPathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg
import std_msgs.msg

class GlobalPathRequest(genpy.Message):
  _md5sum = "69b470637d34f1ed45f4ad2eba99d1e1"
  _type = "perception_msgs/GlobalPathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """perception_msgs/Point start_pt
perception_msgs/Point goal_pt
int32 type

================================================================================
MSG: perception_msgs/Point
#############################
###       SunHao          ###
#############################

float64 x
float64 y
float64 z
float64 s
float64 cuv
float64 heading
float64 speed
float64 speedkmh

############################


int32 rtk_mode # 0: 无影响 1： Not rtk stop
int32 driving_mode # acc or collision avoidance
int32 special_mode  #

####################################33
int32 obs_search_strategy  # 0: donot search obs
int32 speed_mode  #
int32 obs_strategy  #
int32 follow_strategy  #
int32 cross_option  #
int32 reserved_option  #



############################

#int32 id
std_msgs/String uuid

#############################

#int32 line_id
std_msgs/String lane_uuid

#############################

#int32 section_id
std_msgs/String section_uuid



================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['start_pt','goal_pt','type']
  _slot_types = ['perception_msgs/Point','perception_msgs/Point','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_pt,goal_pt,type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalPathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_pt is None:
        self.start_pt = perception_msgs.msg.Point()
      if self.goal_pt is None:
        self.goal_pt = perception_msgs.msg.Point()
      if self.type is None:
        self.type = 0
    else:
      self.start_pt = perception_msgs.msg.Point()
      self.goal_pt = perception_msgs.msg.Point()
      self.type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d9i().pack(_x.start_pt.x, _x.start_pt.y, _x.start_pt.z, _x.start_pt.s, _x.start_pt.cuv, _x.start_pt.heading, _x.start_pt.speed, _x.start_pt.speedkmh, _x.start_pt.rtk_mode, _x.start_pt.driving_mode, _x.start_pt.special_mode, _x.start_pt.obs_search_strategy, _x.start_pt.speed_mode, _x.start_pt.obs_strategy, _x.start_pt.follow_strategy, _x.start_pt.cross_option, _x.start_pt.reserved_option))
      _x = self.start_pt.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_pt.lane_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_pt.section_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8d9i().pack(_x.goal_pt.x, _x.goal_pt.y, _x.goal_pt.z, _x.goal_pt.s, _x.goal_pt.cuv, _x.goal_pt.heading, _x.goal_pt.speed, _x.goal_pt.speedkmh, _x.goal_pt.rtk_mode, _x.goal_pt.driving_mode, _x.goal_pt.special_mode, _x.goal_pt.obs_search_strategy, _x.goal_pt.speed_mode, _x.goal_pt.obs_strategy, _x.goal_pt.follow_strategy, _x.goal_pt.cross_option, _x.goal_pt.reserved_option))
      _x = self.goal_pt.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_pt.lane_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_pt.section_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_pt is None:
        self.start_pt = perception_msgs.msg.Point()
      if self.goal_pt is None:
        self.goal_pt = perception_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.start_pt.x, _x.start_pt.y, _x.start_pt.z, _x.start_pt.s, _x.start_pt.cuv, _x.start_pt.heading, _x.start_pt.speed, _x.start_pt.speedkmh, _x.start_pt.rtk_mode, _x.start_pt.driving_mode, _x.start_pt.special_mode, _x.start_pt.obs_search_strategy, _x.start_pt.speed_mode, _x.start_pt.obs_strategy, _x.start_pt.follow_strategy, _x.start_pt.cross_option, _x.start_pt.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pt.uuid.data = str[start:end].decode('utf-8')
      else:
        self.start_pt.uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pt.lane_uuid.data = str[start:end].decode('utf-8')
      else:
        self.start_pt.lane_uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pt.section_uuid.data = str[start:end].decode('utf-8')
      else:
        self.start_pt.section_uuid.data = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.goal_pt.x, _x.goal_pt.y, _x.goal_pt.z, _x.goal_pt.s, _x.goal_pt.cuv, _x.goal_pt.heading, _x.goal_pt.speed, _x.goal_pt.speedkmh, _x.goal_pt.rtk_mode, _x.goal_pt.driving_mode, _x.goal_pt.special_mode, _x.goal_pt.obs_search_strategy, _x.goal_pt.speed_mode, _x.goal_pt.obs_strategy, _x.goal_pt.follow_strategy, _x.goal_pt.cross_option, _x.goal_pt.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pt.uuid.data = str[start:end].decode('utf-8')
      else:
        self.goal_pt.uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pt.lane_uuid.data = str[start:end].decode('utf-8')
      else:
        self.goal_pt.lane_uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pt.section_uuid.data = str[start:end].decode('utf-8')
      else:
        self.goal_pt.section_uuid.data = str[start:end]
      start = end
      end += 4
      (self.type,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d9i().pack(_x.start_pt.x, _x.start_pt.y, _x.start_pt.z, _x.start_pt.s, _x.start_pt.cuv, _x.start_pt.heading, _x.start_pt.speed, _x.start_pt.speedkmh, _x.start_pt.rtk_mode, _x.start_pt.driving_mode, _x.start_pt.special_mode, _x.start_pt.obs_search_strategy, _x.start_pt.speed_mode, _x.start_pt.obs_strategy, _x.start_pt.follow_strategy, _x.start_pt.cross_option, _x.start_pt.reserved_option))
      _x = self.start_pt.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_pt.lane_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.start_pt.section_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8d9i().pack(_x.goal_pt.x, _x.goal_pt.y, _x.goal_pt.z, _x.goal_pt.s, _x.goal_pt.cuv, _x.goal_pt.heading, _x.goal_pt.speed, _x.goal_pt.speedkmh, _x.goal_pt.rtk_mode, _x.goal_pt.driving_mode, _x.goal_pt.special_mode, _x.goal_pt.obs_search_strategy, _x.goal_pt.speed_mode, _x.goal_pt.obs_strategy, _x.goal_pt.follow_strategy, _x.goal_pt.cross_option, _x.goal_pt.reserved_option))
      _x = self.goal_pt.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_pt.lane_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_pt.section_uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_pt is None:
        self.start_pt = perception_msgs.msg.Point()
      if self.goal_pt is None:
        self.goal_pt = perception_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.start_pt.x, _x.start_pt.y, _x.start_pt.z, _x.start_pt.s, _x.start_pt.cuv, _x.start_pt.heading, _x.start_pt.speed, _x.start_pt.speedkmh, _x.start_pt.rtk_mode, _x.start_pt.driving_mode, _x.start_pt.special_mode, _x.start_pt.obs_search_strategy, _x.start_pt.speed_mode, _x.start_pt.obs_strategy, _x.start_pt.follow_strategy, _x.start_pt.cross_option, _x.start_pt.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pt.uuid.data = str[start:end].decode('utf-8')
      else:
        self.start_pt.uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pt.lane_uuid.data = str[start:end].decode('utf-8')
      else:
        self.start_pt.lane_uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_pt.section_uuid.data = str[start:end].decode('utf-8')
      else:
        self.start_pt.section_uuid.data = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.goal_pt.x, _x.goal_pt.y, _x.goal_pt.z, _x.goal_pt.s, _x.goal_pt.cuv, _x.goal_pt.heading, _x.goal_pt.speed, _x.goal_pt.speedkmh, _x.goal_pt.rtk_mode, _x.goal_pt.driving_mode, _x.goal_pt.special_mode, _x.goal_pt.obs_search_strategy, _x.goal_pt.speed_mode, _x.goal_pt.obs_strategy, _x.goal_pt.follow_strategy, _x.goal_pt.cross_option, _x.goal_pt.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pt.uuid.data = str[start:end].decode('utf-8')
      else:
        self.goal_pt.uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pt.lane_uuid.data = str[start:end].decode('utf-8')
      else:
        self.goal_pt.lane_uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_pt.section_uuid.data = str[start:end].decode('utf-8')
      else:
        self.goal_pt.section_uuid.data = str[start:end]
      start = end
      end += 4
      (self.type,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_8d9i = None
def _get_struct_8d9i():
    global _struct_8d9i
    if _struct_8d9i is None:
        _struct_8d9i = struct.Struct("<8d9i")
    return _struct_8d9i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/GlobalPathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg

class GlobalPathResponse(genpy.Message):
  _md5sum = "292fb84095eab8f09dbe7364f93297bf"
  _type = "perception_msgs/GlobalPathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """perception_msgs/GlobalPathIndex path

================================================================================
MSG: perception_msgs/GlobalPathIndex
#############################
###       SunHao          ###
#############################


int32 start_section
int32 start_lane
int32 start_pt

#########################

int32[] topo

#########################
int32 goal_section
int32 goal_lane
int32 goal_pt

"""
  __slots__ = ['path']
  _slot_types = ['perception_msgs/GlobalPathIndex']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalPathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = perception_msgs.msg.GlobalPathIndex()
    else:
      self.path = perception_msgs.msg.GlobalPathIndex()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.path.start_section, _x.path.start_lane, _x.path.start_pt))
      length = len(self.path.topo)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.path.topo))
      _x = self
      buff.write(_get_struct_3i().pack(_x.path.goal_section, _x.path.goal_lane, _x.path.goal_pt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = perception_msgs.msg.GlobalPathIndex()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.path.start_section, _x.path.start_lane, _x.path.start_pt,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.path.topo = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.path.goal_section, _x.path.goal_lane, _x.path.goal_pt,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.path.start_section, _x.path.start_lane, _x.path.start_pt))
      length = len(self.path.topo)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.path.topo.tostring())
      _x = self
      buff.write(_get_struct_3i().pack(_x.path.goal_section, _x.path.goal_lane, _x.path.goal_pt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = perception_msgs.msg.GlobalPathIndex()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.path.start_section, _x.path.start_lane, _x.path.start_pt,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.path.topo = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 12
      (_x.path.goal_section, _x.path.goal_lane, _x.path.goal_pt,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
class GlobalPath(object):
  _type          = 'perception_msgs/GlobalPath'
  _md5sum = '7837730f008be57270344a16d5aaa53d'
  _request_class  = GlobalPathRequest
  _response_class = GlobalPathResponse
