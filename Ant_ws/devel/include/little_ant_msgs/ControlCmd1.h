// Generated by gencpp from file little_ant_msgs/ControlCmd1.msg
// DO NOT EDIT!


#ifndef LITTLE_ANT_MSGS_MESSAGE_CONTROLCMD1_H
#define LITTLE_ANT_MSGS_MESSAGE_CONTROLCMD1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace little_ant_msgs
{
template <class ContainerAllocator>
struct ControlCmd1_
{
  typedef ControlCmd1_<ContainerAllocator> Type;

  ControlCmd1_()
    : set_driverlessMode(false)
    , set_remoteStart(false)
    , set_handBrake(false)
    , set_turnLight_R(false)
    , set_turnLight_L(false)
    , set_lowBeam(false)
    , set_reverseLight(false)
    , set_brakeLight(false)
    , set_horn(false)  {
    }
  ControlCmd1_(const ContainerAllocator& _alloc)
    : set_driverlessMode(false)
    , set_remoteStart(false)
    , set_handBrake(false)
    , set_turnLight_R(false)
    , set_turnLight_L(false)
    , set_lowBeam(false)
    , set_reverseLight(false)
    , set_brakeLight(false)
    , set_horn(false)  {
  (void)_alloc;
    }



   typedef uint8_t _set_driverlessMode_type;
  _set_driverlessMode_type set_driverlessMode;

   typedef uint8_t _set_remoteStart_type;
  _set_remoteStart_type set_remoteStart;

   typedef uint8_t _set_handBrake_type;
  _set_handBrake_type set_handBrake;

   typedef uint8_t _set_turnLight_R_type;
  _set_turnLight_R_type set_turnLight_R;

   typedef uint8_t _set_turnLight_L_type;
  _set_turnLight_L_type set_turnLight_L;

   typedef uint8_t _set_lowBeam_type;
  _set_lowBeam_type set_lowBeam;

   typedef uint8_t _set_reverseLight_type;
  _set_reverseLight_type set_reverseLight;

   typedef uint8_t _set_brakeLight_type;
  _set_brakeLight_type set_brakeLight;

   typedef uint8_t _set_horn_type;
  _set_horn_type set_horn;





  typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCmd1_

typedef ::little_ant_msgs::ControlCmd1_<std::allocator<void> > ControlCmd1;

typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd1 > ControlCmd1Ptr;
typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd1 const> ControlCmd1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::little_ant_msgs::ControlCmd1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace little_ant_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'little_ant_msgs': ['/home/seu-lc/v2v_exp-gps-ctrl-thu-/Ant_ws/src/little_ant_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f587e931e6927c2a0aadae434268a15b";
  }

  static const char* value(const ::little_ant_msgs::ControlCmd1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf587e931e6927c2aULL;
  static const uint64_t static_value2 = 0x0aadae434268a15bULL;
};

template<class ContainerAllocator>
struct DataType< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "little_ant_msgs/ControlCmd1";
  }

  static const char* value(const ::little_ant_msgs::ControlCmd1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#IDM_1  0x2C5\n\
\n\
bool set_driverlessMode\n\
bool set_remoteStart\n\
bool set_handBrake\n\
bool set_turnLight_R\n\
bool set_turnLight_L\n\
bool set_lowBeam\n\
bool set_reverseLight\n\
bool set_brakeLight\n\
bool set_horn\n\
\n\
";
  }

  static const char* value(const ::little_ant_msgs::ControlCmd1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_driverlessMode);
      stream.next(m.set_remoteStart);
      stream.next(m.set_handBrake);
      stream.next(m.set_turnLight_R);
      stream.next(m.set_turnLight_L);
      stream.next(m.set_lowBeam);
      stream.next(m.set_reverseLight);
      stream.next(m.set_brakeLight);
      stream.next(m.set_horn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCmd1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::little_ant_msgs::ControlCmd1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::little_ant_msgs::ControlCmd1_<ContainerAllocator>& v)
  {
    s << indent << "set_driverlessMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_driverlessMode);
    s << indent << "set_remoteStart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_remoteStart);
    s << indent << "set_handBrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_handBrake);
    s << indent << "set_turnLight_R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_turnLight_R);
    s << indent << "set_turnLight_L: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_turnLight_L);
    s << indent << "set_lowBeam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_lowBeam);
    s << indent << "set_reverseLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_reverseLight);
    s << indent << "set_brakeLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_brakeLight);
    s << indent << "set_horn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_horn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LITTLE_ANT_MSGS_MESSAGE_CONTROLCMD1_H
