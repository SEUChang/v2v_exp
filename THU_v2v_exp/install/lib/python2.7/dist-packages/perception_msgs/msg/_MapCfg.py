# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/MapCfg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MapCfg(genpy.Message):
  _md5sum = "114743d989eebb15f931732b39a7a0f5"
  _type = "perception_msgs/MapCfg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """





bool start_or_pause
bool stop_and_save
bool closed
float32 speed_limit_kph

string bag_name
string tpk_name
####################################33

int32 rtk_mode
int32 driving_mode # acc or collision avoidance
int32 special_mode  #

####################################33
int32 obs_search_strategy  # 0: donot search obs
int32 speed_mode  #
int32 obs_strategy  #
int32 follow_strategy  #
int32 cross_option  #
int32 reserved_option  #
"""
  __slots__ = ['start_or_pause','stop_and_save','closed','speed_limit_kph','bag_name','tpk_name','rtk_mode','driving_mode','special_mode','obs_search_strategy','speed_mode','obs_strategy','follow_strategy','cross_option','reserved_option']
  _slot_types = ['bool','bool','bool','float32','string','string','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_or_pause,stop_and_save,closed,speed_limit_kph,bag_name,tpk_name,rtk_mode,driving_mode,special_mode,obs_search_strategy,speed_mode,obs_strategy,follow_strategy,cross_option,reserved_option

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapCfg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_or_pause is None:
        self.start_or_pause = False
      if self.stop_and_save is None:
        self.stop_and_save = False
      if self.closed is None:
        self.closed = False
      if self.speed_limit_kph is None:
        self.speed_limit_kph = 0.
      if self.bag_name is None:
        self.bag_name = ''
      if self.tpk_name is None:
        self.tpk_name = ''
      if self.rtk_mode is None:
        self.rtk_mode = 0
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.special_mode is None:
        self.special_mode = 0
      if self.obs_search_strategy is None:
        self.obs_search_strategy = 0
      if self.speed_mode is None:
        self.speed_mode = 0
      if self.obs_strategy is None:
        self.obs_strategy = 0
      if self.follow_strategy is None:
        self.follow_strategy = 0
      if self.cross_option is None:
        self.cross_option = 0
      if self.reserved_option is None:
        self.reserved_option = 0
    else:
      self.start_or_pause = False
      self.stop_and_save = False
      self.closed = False
      self.speed_limit_kph = 0.
      self.bag_name = ''
      self.tpk_name = ''
      self.rtk_mode = 0
      self.driving_mode = 0
      self.special_mode = 0
      self.obs_search_strategy = 0
      self.speed_mode = 0
      self.obs_strategy = 0
      self.follow_strategy = 0
      self.cross_option = 0
      self.reserved_option = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Bf().pack(_x.start_or_pause, _x.stop_and_save, _x.closed, _x.speed_limit_kph))
      _x = self.bag_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tpk_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9i().pack(_x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.start_or_pause, _x.stop_and_save, _x.closed, _x.speed_limit_kph,) = _get_struct_3Bf().unpack(str[start:end])
      self.start_or_pause = bool(self.start_or_pause)
      self.stop_and_save = bool(self.stop_and_save)
      self.closed = bool(self.closed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bag_name = str[start:end].decode('utf-8')
      else:
        self.bag_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tpk_name = str[start:end].decode('utf-8')
      else:
        self.tpk_name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Bf().pack(_x.start_or_pause, _x.stop_and_save, _x.closed, _x.speed_limit_kph))
      _x = self.bag_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tpk_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9i().pack(_x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.start_or_pause, _x.stop_and_save, _x.closed, _x.speed_limit_kph,) = _get_struct_3Bf().unpack(str[start:end])
      self.start_or_pause = bool(self.start_or_pause)
      self.stop_and_save = bool(self.stop_and_save)
      self.closed = bool(self.closed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bag_name = str[start:end].decode('utf-8')
      else:
        self.bag_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tpk_name = str[start:end].decode('utf-8')
      else:
        self.tpk_name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9i = None
def _get_struct_9i():
    global _struct_9i
    if _struct_9i is None:
        _struct_9i = struct.Struct("<9i")
    return _struct_9i
_struct_3Bf = None
def _get_struct_3Bf():
    global _struct_3Bf
    if _struct_3Bf is None:
        _struct_3Bf = struct.Struct("<3Bf")
    return _struct_3Bf
