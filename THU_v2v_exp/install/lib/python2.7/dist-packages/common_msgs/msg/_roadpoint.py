# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/roadpoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class roadpoint(genpy.Message):
  _md5sum = "5188723d8908b67bd1c8e04daf63a8f8"
  _type = "common_msgs/roadpoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 x                  #局部横坐标   cm
int16 y                  #局部纵坐标   cm
int32 gx                 #全局横坐标   cm
int32 gy                 #全局纵坐标   cm
uint8 roadtype           #道路属性
uint8 lanetype           #当前车道|总车道(4|4)
float32 heading          #heading
float32 curvature"""
  __slots__ = ['x','y','gx','gy','roadtype','lanetype','heading','curvature']
  _slot_types = ['int16','int16','int32','int32','uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,gx,gy,roadtype,lanetype,heading,curvature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(roadpoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.gx is None:
        self.gx = 0
      if self.gy is None:
        self.gy = 0
      if self.roadtype is None:
        self.roadtype = 0
      if self.lanetype is None:
        self.lanetype = 0
      if self.heading is None:
        self.heading = 0.
      if self.curvature is None:
        self.curvature = 0.
    else:
      self.x = 0
      self.y = 0
      self.gx = 0
      self.gy = 0
      self.roadtype = 0
      self.lanetype = 0
      self.heading = 0.
      self.curvature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h2i2B2f().pack(_x.x, _x.y, _x.gx, _x.gy, _x.roadtype, _x.lanetype, _x.heading, _x.curvature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.x, _x.y, _x.gx, _x.gy, _x.roadtype, _x.lanetype, _x.heading, _x.curvature,) = _get_struct_2h2i2B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h2i2B2f().pack(_x.x, _x.y, _x.gx, _x.gy, _x.roadtype, _x.lanetype, _x.heading, _x.curvature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.x, _x.y, _x.gx, _x.gy, _x.roadtype, _x.lanetype, _x.heading, _x.curvature,) = _get_struct_2h2i2B2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h2i2B2f = None
def _get_struct_2h2i2B2f():
    global _struct_2h2i2B2f
    if _struct_2h2i2B2f is None:
        _struct_2h2i2B2f = struct.Struct("<2h2i2B2f")
    return _struct_2h2i2B2f
