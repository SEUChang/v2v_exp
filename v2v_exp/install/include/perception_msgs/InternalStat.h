// Generated by gencpp from file perception_msgs/InternalStat.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_INTERNALSTAT_H
#define PERCEPTION_MSGS_MESSAGE_INTERNALSTAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct InternalStat_
{
  typedef InternalStat_<ContainerAllocator> Type;

  InternalStat_()
    : state(0)
    , vx(0.0)
    , vy(0.0)
    , omega(0.0)
    , sw(0.0)
    , acc(0.0)  {
    }
  InternalStat_(const ContainerAllocator& _alloc)
    : state(0)
    , vx(0.0)
    , vy(0.0)
    , omega(0.0)
    , sw(0.0)
    , acc(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _omega_type;
  _omega_type omega;

   typedef double _sw_type;
  _sw_type sw;

   typedef double _acc_type;
  _acc_type acc;





  typedef boost::shared_ptr< ::perception_msgs::InternalStat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::InternalStat_<ContainerAllocator> const> ConstPtr;

}; // struct InternalStat_

typedef ::perception_msgs::InternalStat_<std::allocator<void> > InternalStat;

typedef boost::shared_ptr< ::perception_msgs::InternalStat > InternalStatPtr;
typedef boost::shared_ptr< ::perception_msgs::InternalStat const> InternalStatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::InternalStat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::InternalStat_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/sunhao/prog/wild/src/perception_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::InternalStat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::InternalStat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::InternalStat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::InternalStat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::InternalStat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::InternalStat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::InternalStat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2559fc5dbe1d04e91c3c57750ee9ec41";
  }

  static const char* value(const ::perception_msgs::InternalStat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2559fc5dbe1d04e9ULL;
  static const uint64_t static_value2 = 0x1c3c57750ee9ec41ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::InternalStat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/InternalStat";
  }

  static const char* value(const ::perception_msgs::InternalStat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::InternalStat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
int32 state\n\
\n\
float64 vx\n\
float64 vy\n\
\n\
float64 omega\n\
float64 sw\n\
float64 acc\n\
";
  }

  static const char* value(const ::perception_msgs::InternalStat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::InternalStat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.omega);
      stream.next(m.sw);
      stream.next(m.acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InternalStat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::InternalStat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::InternalStat_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "omega: ";
    Printer<double>::stream(s, indent + "  ", v.omega);
    s << indent << "sw: ";
    Printer<double>::stream(s, indent + "  ", v.sw);
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_INTERNALSTAT_H
