# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_msgs/GTIMU.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GTIMU(genpy.Message):
  _md5sum = "d78377954954abd5e348c740ac6f7798"
  _type = "gnss_msgs/GTIMU"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 GPSWeek
float64 GPSTime
float64 pitch_rate
float64 roll_rate
float64 yaw_rate

float64 acc_x
float64 acc_y
float64 acc_z

float64 tpr
"""
  __slots__ = ['GPSWeek','GPSTime','pitch_rate','roll_rate','yaw_rate','acc_x','acc_y','acc_z','tpr']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GPSWeek,GPSTime,pitch_rate,roll_rate,yaw_rate,acc_x,acc_y,acc_z,tpr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GTIMU, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.GPSWeek is None:
        self.GPSWeek = 0
      if self.GPSTime is None:
        self.GPSTime = 0.
      if self.pitch_rate is None:
        self.pitch_rate = 0.
      if self.roll_rate is None:
        self.roll_rate = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.tpr is None:
        self.tpr = 0.
    else:
      self.GPSWeek = 0
      self.GPSTime = 0.
      self.pitch_rate = 0.
      self.roll_rate = 0.
      self.yaw_rate = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.tpr = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i8d().pack(_x.GPSWeek, _x.GPSTime, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.tpr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.GPSWeek, _x.GPSTime, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.tpr,) = _get_struct_i8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i8d().pack(_x.GPSWeek, _x.GPSTime, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.tpr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.GPSWeek, _x.GPSTime, _x.pitch_rate, _x.roll_rate, _x.yaw_rate, _x.acc_x, _x.acc_y, _x.acc_z, _x.tpr,) = _get_struct_i8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i8d = None
def _get_struct_i8d():
    global _struct_i8d
    if _struct_i8d is None:
        _struct_i8d = struct.Struct("<i8d")
    return _struct_i8d
