# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dnc_msgs/Cmd_WF.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Cmd_WF(genpy.Message):
  _md5sum = "d06405f78ad4d1752ebdd64f2ef906dc"
  _type = "dnc_msgs/Cmd_WF"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
#  control cmd for weifang qingsaoche
#

#########################

bool enable_steering
bool enable_braking
bool enable_driving
bool enable_Estop
bool enable_gear
#########################

float32 sw_deg  # steering wheel angle
float32 sw_rad
float32 speed_ms
float32 speed_kms
float32 ax_ms2
float32 omega_rad
int32 gear_mode  # 0: N, // 1: forward , // 2 backward, // 3: stop

#########################
float32 steering
float32 speed"""
  __slots__ = ['enable_steering','enable_braking','enable_driving','enable_Estop','enable_gear','sw_deg','sw_rad','speed_ms','speed_kms','ax_ms2','omega_rad','gear_mode','steering','speed']
  _slot_types = ['bool','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable_steering,enable_braking,enable_driving,enable_Estop,enable_gear,sw_deg,sw_rad,speed_ms,speed_kms,ax_ms2,omega_rad,gear_mode,steering,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cmd_WF, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enable_steering is None:
        self.enable_steering = False
      if self.enable_braking is None:
        self.enable_braking = False
      if self.enable_driving is None:
        self.enable_driving = False
      if self.enable_Estop is None:
        self.enable_Estop = False
      if self.enable_gear is None:
        self.enable_gear = False
      if self.sw_deg is None:
        self.sw_deg = 0.
      if self.sw_rad is None:
        self.sw_rad = 0.
      if self.speed_ms is None:
        self.speed_ms = 0.
      if self.speed_kms is None:
        self.speed_kms = 0.
      if self.ax_ms2 is None:
        self.ax_ms2 = 0.
      if self.omega_rad is None:
        self.omega_rad = 0.
      if self.gear_mode is None:
        self.gear_mode = 0
      if self.steering is None:
        self.steering = 0.
      if self.speed is None:
        self.speed = 0.
    else:
      self.enable_steering = False
      self.enable_braking = False
      self.enable_driving = False
      self.enable_Estop = False
      self.enable_gear = False
      self.sw_deg = 0.
      self.sw_rad = 0.
      self.speed_ms = 0.
      self.speed_kms = 0.
      self.ax_ms2 = 0.
      self.omega_rad = 0.
      self.gear_mode = 0
      self.steering = 0.
      self.speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B6fi2f().pack(_x.enable_steering, _x.enable_braking, _x.enable_driving, _x.enable_Estop, _x.enable_gear, _x.sw_deg, _x.sw_rad, _x.speed_ms, _x.speed_kms, _x.ax_ms2, _x.omega_rad, _x.gear_mode, _x.steering, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.enable_steering, _x.enable_braking, _x.enable_driving, _x.enable_Estop, _x.enable_gear, _x.sw_deg, _x.sw_rad, _x.speed_ms, _x.speed_kms, _x.ax_ms2, _x.omega_rad, _x.gear_mode, _x.steering, _x.speed,) = _get_struct_5B6fi2f().unpack(str[start:end])
      self.enable_steering = bool(self.enable_steering)
      self.enable_braking = bool(self.enable_braking)
      self.enable_driving = bool(self.enable_driving)
      self.enable_Estop = bool(self.enable_Estop)
      self.enable_gear = bool(self.enable_gear)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B6fi2f().pack(_x.enable_steering, _x.enable_braking, _x.enable_driving, _x.enable_Estop, _x.enable_gear, _x.sw_deg, _x.sw_rad, _x.speed_ms, _x.speed_kms, _x.ax_ms2, _x.omega_rad, _x.gear_mode, _x.steering, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.enable_steering, _x.enable_braking, _x.enable_driving, _x.enable_Estop, _x.enable_gear, _x.sw_deg, _x.sw_rad, _x.speed_ms, _x.speed_kms, _x.ax_ms2, _x.omega_rad, _x.gear_mode, _x.steering, _x.speed,) = _get_struct_5B6fi2f().unpack(str[start:end])
      self.enable_steering = bool(self.enable_steering)
      self.enable_braking = bool(self.enable_braking)
      self.enable_driving = bool(self.enable_driving)
      self.enable_Estop = bool(self.enable_Estop)
      self.enable_gear = bool(self.enable_gear)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B6fi2f = None
def _get_struct_5B6fi2f():
    global _struct_5B6fi2f
    if _struct_5B6fi2f is None:
        _struct_5B6fi2f = struct.Struct("<5B6fi2f")
    return _struct_5B6fi2f
