# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_msgs/GPTRA.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPTRA(genpy.Message):
  _md5sum = "e282e90be2db4683bb90f41f45ec3f97"
  _type = "gnss_msgs/GPTRA"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

float64 utc_time
float64 yaw
float64 pitch
float64 roll
int8 QF
int8 sta_num
float64 delay
int8 stn_id"""
  __slots__ = ['utc_time','yaw','pitch','roll','QF','sta_num','delay','stn_id']
  _slot_types = ['float64','float64','float64','float64','int8','int8','float64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       utc_time,yaw,pitch,roll,QF,sta_num,delay,stn_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPTRA, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.utc_time is None:
        self.utc_time = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.QF is None:
        self.QF = 0
      if self.sta_num is None:
        self.sta_num = 0
      if self.delay is None:
        self.delay = 0.
      if self.stn_id is None:
        self.stn_id = 0
    else:
      self.utc_time = 0.
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.QF = 0
      self.sta_num = 0
      self.delay = 0.
      self.stn_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d2bdb().pack(_x.utc_time, _x.yaw, _x.pitch, _x.roll, _x.QF, _x.sta_num, _x.delay, _x.stn_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.utc_time, _x.yaw, _x.pitch, _x.roll, _x.QF, _x.sta_num, _x.delay, _x.stn_id,) = _get_struct_4d2bdb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d2bdb().pack(_x.utc_time, _x.yaw, _x.pitch, _x.roll, _x.QF, _x.sta_num, _x.delay, _x.stn_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.utc_time, _x.yaw, _x.pitch, _x.roll, _x.QF, _x.sta_num, _x.delay, _x.stn_id,) = _get_struct_4d2bdb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d2bdb = None
def _get_struct_4d2bdb():
    global _struct_4d2bdb
    if _struct_4d2bdb is None:
        _struct_4d2bdb = struct.Struct("<4d2bdb")
    return _struct_4d2bdb
