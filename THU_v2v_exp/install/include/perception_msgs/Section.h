// Generated by gencpp from file perception_msgs/Section.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_SECTION_H
#define PERCEPTION_MSGS_MESSAGE_SECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/Line.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct Section_
{
  typedef Section_<ContainerAllocator> Type;

  Section_()
    : lanes()
    , direction_mode(0)
    , uuid()
    , to_section_uuid()
    , from_section_uuid()
    , to_lane_uuid()
    , from_lane_uuid()
    , to_pt_uuid()
    , from_pt_uuid()
    , length(0.0)
    , highest_speed(0.0)
    , traffic_cost(0.0)  {
    }
  Section_(const ContainerAllocator& _alloc)
    : lanes(_alloc)
    , direction_mode(0)
    , uuid(_alloc)
    , to_section_uuid(_alloc)
    , from_section_uuid(_alloc)
    , to_lane_uuid(_alloc)
    , from_lane_uuid(_alloc)
    , to_pt_uuid(_alloc)
    , from_pt_uuid(_alloc)
    , length(0.0)
    , highest_speed(0.0)
    , traffic_cost(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::perception_msgs::Line_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_msgs::Line_<ContainerAllocator> >::other >  _lanes_type;
  _lanes_type lanes;

   typedef int32_t _direction_mode_type;
  _direction_mode_type direction_mode;

   typedef  ::std_msgs::String_<ContainerAllocator>  _uuid_type;
  _uuid_type uuid;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _to_section_uuid_type;
  _to_section_uuid_type to_section_uuid;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _from_section_uuid_type;
  _from_section_uuid_type from_section_uuid;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _to_lane_uuid_type;
  _to_lane_uuid_type to_lane_uuid;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _from_lane_uuid_type;
  _from_lane_uuid_type from_lane_uuid;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _to_pt_uuid_type;
  _to_pt_uuid_type to_pt_uuid;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _from_pt_uuid_type;
  _from_pt_uuid_type from_pt_uuid;

   typedef float _length_type;
  _length_type length;

   typedef float _highest_speed_type;
  _highest_speed_type highest_speed;

   typedef float _traffic_cost_type;
  _traffic_cost_type traffic_cost;





  typedef boost::shared_ptr< ::perception_msgs::Section_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::Section_<ContainerAllocator> const> ConstPtr;

}; // struct Section_

typedef ::perception_msgs::Section_<std::allocator<void> > Section;

typedef boost::shared_ptr< ::perception_msgs::Section > SectionPtr;
typedef boost::shared_ptr< ::perception_msgs::Section const> SectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::Section_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::Section_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/sunhao/wild/src/perception_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Section_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::Section_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Section_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::Section_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Section_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::Section_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::Section_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b3fd0e0d7f2e11a16dcf750a2d0177d";
  }

  static const char* value(const ::perception_msgs::Section_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b3fd0e0d7f2e11aULL;
  static const uint64_t static_value2 = 0x16dcf750a2d0177dULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::Section_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/Section";
  }

  static const char* value(const ::perception_msgs::Section_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::Section_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
\n\
\n\
perception_msgs/Line[] lanes\n\
\n\
int32 direction_mode\n\
\n\
#############################\n\
#int32 id\n\
std_msgs/String uuid\n\
\n\
#############################\n\
\n\
std_msgs/String[] to_section_uuid\n\
std_msgs/String[] from_section_uuid\n\
\n\
\n\
std_msgs/String[] to_lane_uuid\n\
std_msgs/String[] from_lane_uuid\n\
\n\
\n\
std_msgs/String[] to_pt_uuid\n\
std_msgs/String[] from_pt_uuid\n\
\n\
#int32[] to_pt_id\n\
#int32[] from_pt_id\n\
\n\
#############################\n\
\n\
float32 length\n\
float32 highest_speed\n\
float32 traffic_cost\n\
\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/Line\n\
#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
perception_msgs/Point[] pts\n\
\n\
#############################\n\
int8 is_main # Is the lane center lane of this section\n\
float64 offset\n\
float64 width\n\
\n\
#############################\n\
\n\
#int32 id\n\
std_msgs/String uuid\n\
\n\
#############################\n\
\n\
std_msgs/String main_uuid\n\
\n\
#int32 left_id\n\
std_msgs/String left_uuid\n\
\n\
#int32 right_id\n\
std_msgs/String right_uuid\n\
\n\
\n\
#############################\n\
\n\
#int32 section_id\n\
std_msgs/String section_uuid\n\
\n\
#############################\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/Point\n\
#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 s\n\
float64 cuv\n\
float64 heading\n\
float64 speed\n\
float64 speedkmh\n\
\n\
############################\n\
\n\
\n\
int32 rtk_mode # 0: 无影响 1： Not rtk stop\n\
int32 driving_mode # acc or collision avoidance\n\
int32 special_mode  #\n\
\n\
####################################33\n\
int32 obs_search_strategy  # 0: donot search obs\n\
int32 speed_mode  #\n\
int32 obs_strategy  #\n\
int32 follow_strategy  #\n\
int32 cross_option  #\n\
int32 reserved_option  #\n\
\n\
\n\
\n\
############################\n\
\n\
#int32 id\n\
std_msgs/String uuid\n\
\n\
#############################\n\
\n\
#int32 line_id\n\
std_msgs/String lane_uuid\n\
\n\
#############################\n\
\n\
#int32 section_id\n\
std_msgs/String section_uuid\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::perception_msgs::Section_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::Section_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lanes);
      stream.next(m.direction_mode);
      stream.next(m.uuid);
      stream.next(m.to_section_uuid);
      stream.next(m.from_section_uuid);
      stream.next(m.to_lane_uuid);
      stream.next(m.from_lane_uuid);
      stream.next(m.to_pt_uuid);
      stream.next(m.from_pt_uuid);
      stream.next(m.length);
      stream.next(m.highest_speed);
      stream.next(m.traffic_cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Section_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::Section_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::Section_<ContainerAllocator>& v)
  {
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::Line_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
    s << indent << "direction_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction_mode);
    s << indent << "uuid: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.uuid);
    s << indent << "to_section_uuid[]" << std::endl;
    for (size_t i = 0; i < v.to_section_uuid.size(); ++i)
    {
      s << indent << "  to_section_uuid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.to_section_uuid[i]);
    }
    s << indent << "from_section_uuid[]" << std::endl;
    for (size_t i = 0; i < v.from_section_uuid.size(); ++i)
    {
      s << indent << "  from_section_uuid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.from_section_uuid[i]);
    }
    s << indent << "to_lane_uuid[]" << std::endl;
    for (size_t i = 0; i < v.to_lane_uuid.size(); ++i)
    {
      s << indent << "  to_lane_uuid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.to_lane_uuid[i]);
    }
    s << indent << "from_lane_uuid[]" << std::endl;
    for (size_t i = 0; i < v.from_lane_uuid.size(); ++i)
    {
      s << indent << "  from_lane_uuid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.from_lane_uuid[i]);
    }
    s << indent << "to_pt_uuid[]" << std::endl;
    for (size_t i = 0; i < v.to_pt_uuid.size(); ++i)
    {
      s << indent << "  to_pt_uuid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.to_pt_uuid[i]);
    }
    s << indent << "from_pt_uuid[]" << std::endl;
    for (size_t i = 0; i < v.from_pt_uuid.size(); ++i)
    {
      s << indent << "  from_pt_uuid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.from_pt_uuid[i]);
    }
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "highest_speed: ";
    Printer<float>::stream(s, indent + "  ", v.highest_speed);
    s << indent << "traffic_cost: ";
    Printer<float>::stream(s, indent + "  ", v.traffic_cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_SECTION_H
