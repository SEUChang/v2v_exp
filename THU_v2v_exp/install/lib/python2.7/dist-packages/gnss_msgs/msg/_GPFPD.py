# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_msgs/GPFPD.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPFPD(genpy.Message):
  _md5sum = "595a3f473d05acf864715755cd142584"
  _type = "gnss_msgs/GPFPD"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
#
#

int32 GPS_week
float64 GPS_time

float64 heading
float64 pitch
float64 roll

float64 lat
float64 lon
float64 alt

float64 v_east
float64 v_north
float64 v_sky

float64 baseline_len


int32 num_sat1
int32 num_sat2

int32 gnss_status
int32 gnss_mode"""
  __slots__ = ['GPS_week','GPS_time','heading','pitch','roll','lat','lon','alt','v_east','v_north','v_sky','baseline_len','num_sat1','num_sat2','gnss_status','gnss_mode']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GPS_week,GPS_time,heading,pitch,roll,lat,lon,alt,v_east,v_north,v_sky,baseline_len,num_sat1,num_sat2,gnss_status,gnss_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPFPD, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.GPS_week is None:
        self.GPS_week = 0
      if self.GPS_time is None:
        self.GPS_time = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.alt is None:
        self.alt = 0.
      if self.v_east is None:
        self.v_east = 0.
      if self.v_north is None:
        self.v_north = 0.
      if self.v_sky is None:
        self.v_sky = 0.
      if self.baseline_len is None:
        self.baseline_len = 0.
      if self.num_sat1 is None:
        self.num_sat1 = 0
      if self.num_sat2 is None:
        self.num_sat2 = 0
      if self.gnss_status is None:
        self.gnss_status = 0
      if self.gnss_mode is None:
        self.gnss_mode = 0
    else:
      self.GPS_week = 0
      self.GPS_time = 0.
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.lat = 0.
      self.lon = 0.
      self.alt = 0.
      self.v_east = 0.
      self.v_north = 0.
      self.v_sky = 0.
      self.baseline_len = 0.
      self.num_sat1 = 0
      self.num_sat2 = 0
      self.gnss_status = 0
      self.gnss_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i11d4i().pack(_x.GPS_week, _x.GPS_time, _x.heading, _x.pitch, _x.roll, _x.lat, _x.lon, _x.alt, _x.v_east, _x.v_north, _x.v_sky, _x.baseline_len, _x.num_sat1, _x.num_sat2, _x.gnss_status, _x.gnss_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 108
      (_x.GPS_week, _x.GPS_time, _x.heading, _x.pitch, _x.roll, _x.lat, _x.lon, _x.alt, _x.v_east, _x.v_north, _x.v_sky, _x.baseline_len, _x.num_sat1, _x.num_sat2, _x.gnss_status, _x.gnss_mode,) = _get_struct_i11d4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i11d4i().pack(_x.GPS_week, _x.GPS_time, _x.heading, _x.pitch, _x.roll, _x.lat, _x.lon, _x.alt, _x.v_east, _x.v_north, _x.v_sky, _x.baseline_len, _x.num_sat1, _x.num_sat2, _x.gnss_status, _x.gnss_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 108
      (_x.GPS_week, _x.GPS_time, _x.heading, _x.pitch, _x.roll, _x.lat, _x.lon, _x.alt, _x.v_east, _x.v_north, _x.v_sky, _x.baseline_len, _x.num_sat1, _x.num_sat2, _x.gnss_status, _x.gnss_mode,) = _get_struct_i11d4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i11d4i = None
def _get_struct_i11d4i():
    global _struct_i11d4i
    if _struct_i11d4i is None:
        _struct_i11d4i = struct.Struct("<i11d4i")
    return _struct_i11d4i
