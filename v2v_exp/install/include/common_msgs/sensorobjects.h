// Generated by gencpp from file common_msgs/sensorobjects.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_SENSOROBJECTS_H
#define COMMON_MSGS_MESSAGE_SENSOROBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_msgs/sensorobject.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct sensorobjects_
{
  typedef sensorobjects_<ContainerAllocator> Type;

  sensorobjects_()
    : obs()
    , isvalid(0)
    , timestamp(0)  {
    }
  sensorobjects_(const ContainerAllocator& _alloc)
    : obs(_alloc)
    , isvalid(0)
    , timestamp(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::common_msgs::sensorobject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::common_msgs::sensorobject_<ContainerAllocator> >::other >  _obs_type;
  _obs_type obs;

   typedef uint8_t _isvalid_type;
  _isvalid_type isvalid;

   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::common_msgs::sensorobjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::sensorobjects_<ContainerAllocator> const> ConstPtr;

}; // struct sensorobjects_

typedef ::common_msgs::sensorobjects_<std::allocator<void> > sensorobjects;

typedef boost::shared_ptr< ::common_msgs::sensorobjects > sensorobjectsPtr;
typedef boost::shared_ptr< ::common_msgs::sensorobjects const> sensorobjectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::sensorobjects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::sensorobjects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/sunhao/prog/wild/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::sensorobjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::sensorobjects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::sensorobjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::sensorobjects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::sensorobjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::sensorobjects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::sensorobjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4e6052190baa67cdc532443b5d99ec9";
  }

  static const char* value(const ::common_msgs::sensorobjects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4e6052190baa67cULL;
  static const uint64_t static_value2 = 0xdc532443b5d99ec9ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::sensorobjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/sensorobjects";
  }

  static const char* value(const ::common_msgs::sensorobjects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::sensorobjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensorobject[] obs\n\
uint8 isvalid\n\
int64 timestamp\n\
================================================================================\n\
MSG: common_msgs/sensorobject\n\
uint8   id                     #跟踪的ID\n\
float32 x                      #横坐标\n\
float32 y                      #纵坐标\n\
float32 relspeedy              #纵轴相对速度\n\
float32 relspeedx              #横轴相对速度\n\
float32 azimuth                #航向\n\
float32 width                  #宽度\n\
float32 length                 #长度\n\
float32 height                 #高度\n\
uint8   classification         #类别\n\
uint8   value                  #置信度\n\
point3d[] points #轮廓点数据 \n\
================================================================================\n\
MSG: common_msgs/point3d\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::common_msgs::sensorobjects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::sensorobjects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obs);
      stream.next(m.isvalid);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensorobjects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::sensorobjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::sensorobjects_<ContainerAllocator>& v)
  {
    s << indent << "obs[]" << std::endl;
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      s << indent << "  obs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::common_msgs::sensorobject_<ContainerAllocator> >::stream(s, indent + "    ", v.obs[i]);
    }
    s << indent << "isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isvalid);
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_SENSOROBJECTS_H
