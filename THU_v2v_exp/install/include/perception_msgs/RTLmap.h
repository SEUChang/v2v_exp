// Generated by gencpp from file perception_msgs/RTLmap.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_RTLMAP_H
#define PERCEPTION_MSGS_MESSAGE_RTLMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/ObsOccGrid.h>
#include <perception_msgs/GridObs.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct RTLmap_
{
  typedef RTLmap_<ContainerAllocator> Type;

  RTLmap_()
    : occ_grid()
    , grid_obs()  {
    }
  RTLmap_(const ContainerAllocator& _alloc)
    : occ_grid(_alloc)
    , grid_obs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::perception_msgs::ObsOccGrid_<ContainerAllocator>  _occ_grid_type;
  _occ_grid_type occ_grid;

   typedef  ::perception_msgs::GridObs_<ContainerAllocator>  _grid_obs_type;
  _grid_obs_type grid_obs;





  typedef boost::shared_ptr< ::perception_msgs::RTLmap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::RTLmap_<ContainerAllocator> const> ConstPtr;

}; // struct RTLmap_

typedef ::perception_msgs::RTLmap_<std::allocator<void> > RTLmap;

typedef boost::shared_ptr< ::perception_msgs::RTLmap > RTLmapPtr;
typedef boost::shared_ptr< ::perception_msgs::RTLmap const> RTLmapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::RTLmap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::RTLmap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'perception_msgs': ['/home/sunhao/wild/src/perception_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::RTLmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::RTLmap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::RTLmap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::RTLmap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::RTLmap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::RTLmap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::RTLmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cad5159f0957a62d993fb789a686586c";
  }

  static const char* value(const ::perception_msgs::RTLmap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcad5159f0957a62dULL;
  static const uint64_t static_value2 = 0x993fb789a686586cULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::RTLmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/RTLmap";
  }

  static const char* value(const ::perception_msgs::RTLmap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::RTLmap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#############################\n\
###       SunHao          ###\n\
#############################\n\
\n\
# traditional #\n\
perception_msgs/ObsOccGrid occ_grid\n\
\n\
##  better  ##\n\
perception_msgs/GridObs grid_obs\n\
================================================================================\n\
MSG: perception_msgs/ObsOccGrid\n\
#################\n\
\n\
std_msgs/Header header\n\
\n\
int8[] occ\n\
float32 gird_size\n\
int32 col_num\n\
int32 row_num\n\
\n\
float32 x0\n\
float32 y0\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/GridObs\n\
\n\
###\n\
\n\
perception_msgs/Object[] obs\n\
float32 grid_size\n\
###\n\
================================================================================\n\
MSG: perception_msgs/Object\n\
#\n\
#\n\
\n\
\n\
perception_msgs/Pt[] Pts\n\
\n\
int8 id\n\
int8 type\n\
\n\
float64  relative_dir\n\
float64  relative_speed\n\
\n\
\n\
###  add gridcells info  ###\n\
\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/Pt\n\
####\n\
###\n\
\n\
\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::perception_msgs::RTLmap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::RTLmap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.occ_grid);
      stream.next(m.grid_obs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RTLmap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::RTLmap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::RTLmap_<ContainerAllocator>& v)
  {
    s << indent << "occ_grid: ";
    s << std::endl;
    Printer< ::perception_msgs::ObsOccGrid_<ContainerAllocator> >::stream(s, indent + "  ", v.occ_grid);
    s << indent << "grid_obs: ";
    s << std::endl;
    Printer< ::perception_msgs::GridObs_<ContainerAllocator> >::stream(s, indent + "  ", v.grid_obs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_RTLMAP_H
