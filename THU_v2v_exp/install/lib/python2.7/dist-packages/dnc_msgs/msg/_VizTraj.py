# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dnc_msgs/VizTraj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dnc_msgs.msg
import std_msgs.msg

class VizTraj(genpy.Message):
  _md5sum = "23126120fd65eed3989e3e640a1add5d"
  _type = "dnc_msgs/VizTraj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """dnc_msgs/DNCtrajectory[] cluster
================================================================================
MSG: dnc_msgs/DNCtrajectory
#############################
###       SunHao          ###
#############################

std_msgs/Header header

int32 mode
float32 desired_ax
dnc_msgs/DNCpath path

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dnc_msgs/DNCpath
#############################
###       SunHao          ###
#############################


dnc_msgs/DNCpoint[] pts
bool s_flag
bool h_flag
================================================================================
MSG: dnc_msgs/DNCpoint
#############################
###       SunHao          ###
#############################


float64 x
float64 y
float64 s

float64 cuv
float64 heading
float64 speed

float32 h
"""
  __slots__ = ['cluster']
  _slot_types = ['dnc_msgs/DNCtrajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VizTraj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cluster is None:
        self.cluster = []
    else:
      self.cluster = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.cluster:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.mode, _x.desired_ax))
        _v3 = val1.path
        length = len(_v3.pts)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.pts:
          _x = val3
          buff.write(_get_struct_6df().pack(_x.x, _x.y, _x.s, _x.cuv, _x.heading, _x.speed, _x.h))
        _x = _v3
        buff.write(_get_struct_2B().pack(_x.s_flag, _x.h_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cluster is None:
        self.cluster = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cluster = []
      for i in range(0, length):
        val1 = dnc_msgs.msg.DNCtrajectory()
        _v4 = val1.header
        start = end
        end += 4
        (_v4.seq,) = _get_struct_I().unpack(str[start:end])
        _v5 = _v4.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.frame_id = str[start:end].decode('utf-8')
        else:
          _v4.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.mode, _x.desired_ax,) = _get_struct_if().unpack(str[start:end])
        _v6 = val1.path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v6.pts = []
        for i in range(0, length):
          val3 = dnc_msgs.msg.DNCpoint()
          _x = val3
          start = end
          end += 52
          (_x.x, _x.y, _x.s, _x.cuv, _x.heading, _x.speed, _x.h,) = _get_struct_6df().unpack(str[start:end])
          _v6.pts.append(val3)
        _x = _v6
        start = end
        end += 2
        (_x.s_flag, _x.h_flag,) = _get_struct_2B().unpack(str[start:end])
        _v6.s_flag = bool(_v6.s_flag)
        _v6.h_flag = bool(_v6.h_flag)
        self.cluster.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.cluster:
        _v7 = val1.header
        buff.write(_get_struct_I().pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.mode, _x.desired_ax))
        _v9 = val1.path
        length = len(_v9.pts)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.pts:
          _x = val3
          buff.write(_get_struct_6df().pack(_x.x, _x.y, _x.s, _x.cuv, _x.heading, _x.speed, _x.h))
        _x = _v9
        buff.write(_get_struct_2B().pack(_x.s_flag, _x.h_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cluster is None:
        self.cluster = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cluster = []
      for i in range(0, length):
        val1 = dnc_msgs.msg.DNCtrajectory()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _get_struct_I().unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8')
        else:
          _v10.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.mode, _x.desired_ax,) = _get_struct_if().unpack(str[start:end])
        _v12 = val1.path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v12.pts = []
        for i in range(0, length):
          val3 = dnc_msgs.msg.DNCpoint()
          _x = val3
          start = end
          end += 52
          (_x.x, _x.y, _x.s, _x.cuv, _x.heading, _x.speed, _x.h,) = _get_struct_6df().unpack(str[start:end])
          _v12.pts.append(val3)
        _x = _v12
        start = end
        end += 2
        (_x.s_flag, _x.h_flag,) = _get_struct_2B().unpack(str[start:end])
        _v12.s_flag = bool(_v12.s_flag)
        _v12.h_flag = bool(_v12.h_flag)
        self.cluster.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6df = None
def _get_struct_6df():
    global _struct_6df
    if _struct_6df is None:
        _struct_6df = struct.Struct("<6df")
    return _struct_6df
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
