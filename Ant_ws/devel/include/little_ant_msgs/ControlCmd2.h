// Generated by gencpp from file little_ant_msgs/ControlCmd2.msg
// DO NOT EDIT!


#ifndef LITTLE_ANT_MSGS_MESSAGE_CONTROLCMD2_H
#define LITTLE_ANT_MSGS_MESSAGE_CONTROLCMD2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace little_ant_msgs
{
template <class ContainerAllocator>
struct ControlCmd2_
{
  typedef ControlCmd2_<ContainerAllocator> Type;

  ControlCmd2_()
    : set_gear(0)
    , set_speed(0.0)
    , set_brake(0.0)
    , set_accelerate(0.0)
    , set_roadWheelAngle(0.0)
    , set_emergencyBrake(false)  {
    }
  ControlCmd2_(const ContainerAllocator& _alloc)
    : set_gear(0)
    , set_speed(0.0)
    , set_brake(0.0)
    , set_accelerate(0.0)
    , set_roadWheelAngle(0.0)
    , set_emergencyBrake(false)  {
  (void)_alloc;
    }



   typedef uint8_t _set_gear_type;
  _set_gear_type set_gear;

   typedef float _set_speed_type;
  _set_speed_type set_speed;

   typedef float _set_brake_type;
  _set_brake_type set_brake;

   typedef float _set_accelerate_type;
  _set_accelerate_type set_accelerate;

   typedef float _set_roadWheelAngle_type;
  _set_roadWheelAngle_type set_roadWheelAngle;

   typedef uint8_t _set_emergencyBrake_type;
  _set_emergencyBrake_type set_emergencyBrake;



  enum {
    GEAR_DRIVE = 1u,
    GEAR_REVERSE = 9u,
    GEAR_NEUTRAL = 10u,
    GEAR_PARKING = 11u,
  };


  typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCmd2_

typedef ::little_ant_msgs::ControlCmd2_<std::allocator<void> > ControlCmd2;

typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd2 > ControlCmd2Ptr;
typedef boost::shared_ptr< ::little_ant_msgs::ControlCmd2 const> ControlCmd2ConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::little_ant_msgs::ControlCmd2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace little_ant_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'little_ant_msgs': ['/home/seu-lc/v2v_exp-gps-ctrl-thu-/Ant_ws/src/little_ant_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37dba26fbb2ffb96611897d743ebdf12";
  }

  static const char* value(const ::little_ant_msgs::ControlCmd2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37dba26fbb2ffb96ULL;
  static const uint64_t static_value2 = 0x611897d743ebdf12ULL;
};

template<class ContainerAllocator>
struct DataType< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "little_ant_msgs/ControlCmd2";
  }

  static const char* value(const ::little_ant_msgs::ControlCmd2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#IDM_2  0x1C5\n\
\n\
\n\
uint8 GEAR_DRIVE   = 1\n\
uint8 GEAR_REVERSE = 9\n\
uint8 GEAR_NEUTRAL = 10\n\
uint8 GEAR_PARKING = 11\n\
\n\
uint8 set_gear\n\
float32 set_speed\n\
float32 set_brake\n\
float32 set_accelerate\n\
float32 set_roadWheelAngle   #CCW(-), CW(+)\n\
bool set_emergencyBrake\n\
";
  }

  static const char* value(const ::little_ant_msgs::ControlCmd2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_gear);
      stream.next(m.set_speed);
      stream.next(m.set_brake);
      stream.next(m.set_accelerate);
      stream.next(m.set_roadWheelAngle);
      stream.next(m.set_emergencyBrake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCmd2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::little_ant_msgs::ControlCmd2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::little_ant_msgs::ControlCmd2_<ContainerAllocator>& v)
  {
    s << indent << "set_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_gear);
    s << indent << "set_speed: ";
    Printer<float>::stream(s, indent + "  ", v.set_speed);
    s << indent << "set_brake: ";
    Printer<float>::stream(s, indent + "  ", v.set_brake);
    s << indent << "set_accelerate: ";
    Printer<float>::stream(s, indent + "  ", v.set_accelerate);
    s << indent << "set_roadWheelAngle: ";
    Printer<float>::stream(s, indent + "  ", v.set_roadWheelAngle);
    s << indent << "set_emergencyBrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_emergencyBrake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LITTLE_ANT_MSGS_MESSAGE_CONTROLCMD2_H
