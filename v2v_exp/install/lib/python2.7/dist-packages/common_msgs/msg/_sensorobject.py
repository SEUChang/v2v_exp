# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/sensorobject.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg

class sensorobject(genpy.Message):
  _md5sum = "ad57f5cd9081dfdd52f43461a66c76f4"
  _type = "common_msgs/sensorobject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8   id                     #跟踪的ID
float32 x                      #横坐标
float32 y                      #纵坐标
float32 relspeedy              #纵轴相对速度
float32 relspeedx              #横轴相对速度
float32 azimuth                #航向
float32 width                  #宽度
float32 length                 #长度
float32 height                 #高度
uint8   classification         #类别
uint8   value                  #置信度
point3d[] points #轮廓点数据 
================================================================================
MSG: common_msgs/point3d
float32 x
float32 y
float32 z"""
  __slots__ = ['id','x','y','relspeedy','relspeedx','azimuth','width','length','height','classification','value','points']
  _slot_types = ['uint8','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','common_msgs/point3d[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,x,y,relspeedy,relspeedx,azimuth,width,length,height,classification,value,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensorobject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.relspeedy is None:
        self.relspeedy = 0.
      if self.relspeedx is None:
        self.relspeedx = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.height is None:
        self.height = 0.
      if self.classification is None:
        self.classification = 0
      if self.value is None:
        self.value = 0
      if self.points is None:
        self.points = []
    else:
      self.id = 0
      self.x = 0.
      self.y = 0.
      self.relspeedy = 0.
      self.relspeedx = 0.
      self.azimuth = 0.
      self.width = 0.
      self.length = 0.
      self.height = 0.
      self.classification = 0
      self.value = 0
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B8f2B().pack(_x.id, _x.x, _x.y, _x.relspeedy, _x.relspeedx, _x.azimuth, _x.width, _x.length, _x.height, _x.classification, _x.value))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 35
      (_x.id, _x.x, _x.y, _x.relspeedy, _x.relspeedx, _x.azimuth, _x.width, _x.length, _x.height, _x.classification, _x.value,) = _get_struct_B8f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = common_msgs.msg.point3d()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B8f2B().pack(_x.id, _x.x, _x.y, _x.relspeedy, _x.relspeedx, _x.azimuth, _x.width, _x.length, _x.height, _x.classification, _x.value))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 35
      (_x.id, _x.x, _x.y, _x.relspeedy, _x.relspeedx, _x.azimuth, _x.width, _x.length, _x.height, _x.classification, _x.value,) = _get_struct_B8f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = common_msgs.msg.point3d()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B8f2B = None
def _get_struct_B8f2B():
    global _struct_B8f2B
    if _struct_B8f2B is None:
        _struct_B8f2B = struct.Struct("<B8f2B")
    return _struct_B8f2B
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
