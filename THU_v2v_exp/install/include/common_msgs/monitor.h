// Generated by gencpp from file common_msgs/monitor.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_MONITOR_H
#define COMMON_MSGS_MESSAGE_MONITOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct monitor_
{
  typedef monitor_<ContainerAllocator> Type;

  monitor_()
    : valuelight()
    , deslight()
    , valuetext()
    , destext()
    , dotcnt()
    , timestamp(0)
    , status(0)  {
    }
  monitor_(const ContainerAllocator& _alloc)
    : valuelight(_alloc)
    , deslight(_alloc)
    , valuetext(_alloc)
    , destext(_alloc)
    , dotcnt(_alloc)
    , timestamp(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _valuelight_type;
  _valuelight_type valuelight;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _deslight_type;
  _deslight_type deslight;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _valuetext_type;
  _valuetext_type valuetext;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _destext_type;
  _destext_type destext;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _dotcnt_type;
  _dotcnt_type dotcnt;

   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef int64_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::common_msgs::monitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::monitor_<ContainerAllocator> const> ConstPtr;

}; // struct monitor_

typedef ::common_msgs::monitor_<std::allocator<void> > monitor;

typedef boost::shared_ptr< ::common_msgs::monitor > monitorPtr;
typedef boost::shared_ptr< ::common_msgs::monitor const> monitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::monitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::monitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/sunhao/wild/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::monitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::monitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::monitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::monitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::monitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::monitor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::monitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dec2db79b03f82b53f8552b76488299a";
  }

  static const char* value(const ::common_msgs::monitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdec2db79b03f82b5ULL;
  static const uint64_t static_value2 = 0x3f8552b76488299aULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::monitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/monitor";
  }

  static const char* value(const ::common_msgs::monitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::monitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte[] valuelight\n\
string[] deslight\n\
float64[] valuetext\n\
string[] destext\n\
byte[] dotcnt\n\
int64 timestamp\n\
int64 status\n\
";
  }

  static const char* value(const ::common_msgs::monitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::monitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valuelight);
      stream.next(m.deslight);
      stream.next(m.valuetext);
      stream.next(m.destext);
      stream.next(m.dotcnt);
      stream.next(m.timestamp);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct monitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::monitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::monitor_<ContainerAllocator>& v)
  {
    s << indent << "valuelight[]" << std::endl;
    for (size_t i = 0; i < v.valuelight.size(); ++i)
    {
      s << indent << "  valuelight[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.valuelight[i]);
    }
    s << indent << "deslight[]" << std::endl;
    for (size_t i = 0; i < v.deslight.size(); ++i)
    {
      s << indent << "  deslight[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.deslight[i]);
    }
    s << indent << "valuetext[]" << std::endl;
    for (size_t i = 0; i < v.valuetext.size(); ++i)
    {
      s << indent << "  valuetext[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.valuetext[i]);
    }
    s << indent << "destext[]" << std::endl;
    for (size_t i = 0; i < v.destext.size(); ++i)
    {
      s << indent << "  destext[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destext[i]);
    }
    s << indent << "dotcnt[]" << std::endl;
    for (size_t i = 0; i < v.dotcnt.size(); ++i)
    {
      s << indent << "  dotcnt[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.dotcnt[i]);
    }
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_MONITOR_H
