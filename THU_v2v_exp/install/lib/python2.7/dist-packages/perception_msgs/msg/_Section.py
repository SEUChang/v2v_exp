# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/Section.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg
import std_msgs.msg

class Section(genpy.Message):
  _md5sum = "6b3fd0e0d7f2e11a16dcf750a2d0177d"
  _type = "perception_msgs/Section"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#############################
###       SunHao          ###
#############################



perception_msgs/Line[] lanes

int32 direction_mode

#############################
#int32 id
std_msgs/String uuid

#############################

std_msgs/String[] to_section_uuid
std_msgs/String[] from_section_uuid


std_msgs/String[] to_lane_uuid
std_msgs/String[] from_lane_uuid


std_msgs/String[] to_pt_uuid
std_msgs/String[] from_pt_uuid

#int32[] to_pt_id
#int32[] from_pt_id

#############################

float32 length
float32 highest_speed
float32 traffic_cost



================================================================================
MSG: perception_msgs/Line
#############################
###       SunHao          ###
#############################

perception_msgs/Point[] pts

#############################
int8 is_main # Is the lane center lane of this section
float64 offset
float64 width

#############################

#int32 id
std_msgs/String uuid

#############################

std_msgs/String main_uuid

#int32 left_id
std_msgs/String left_uuid

#int32 right_id
std_msgs/String right_uuid


#############################

#int32 section_id
std_msgs/String section_uuid

#############################


================================================================================
MSG: perception_msgs/Point
#############################
###       SunHao          ###
#############################

float64 x
float64 y
float64 z
float64 s
float64 cuv
float64 heading
float64 speed
float64 speedkmh

############################


int32 rtk_mode # 0: 无影响 1： Not rtk stop
int32 driving_mode # acc or collision avoidance
int32 special_mode  #

####################################33
int32 obs_search_strategy  # 0: donot search obs
int32 speed_mode  #
int32 obs_strategy  #
int32 follow_strategy  #
int32 cross_option  #
int32 reserved_option  #



############################

#int32 id
std_msgs/String uuid

#############################

#int32 line_id
std_msgs/String lane_uuid

#############################

#int32 section_id
std_msgs/String section_uuid



================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['lanes','direction_mode','uuid','to_section_uuid','from_section_uuid','to_lane_uuid','from_lane_uuid','to_pt_uuid','from_pt_uuid','length','highest_speed','traffic_cost']
  _slot_types = ['perception_msgs/Line[]','int32','std_msgs/String','std_msgs/String[]','std_msgs/String[]','std_msgs/String[]','std_msgs/String[]','std_msgs/String[]','std_msgs/String[]','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lanes,direction_mode,uuid,to_section_uuid,from_section_uuid,to_lane_uuid,from_lane_uuid,to_pt_uuid,from_pt_uuid,length,highest_speed,traffic_cost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Section, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lanes is None:
        self.lanes = []
      if self.direction_mode is None:
        self.direction_mode = 0
      if self.uuid is None:
        self.uuid = std_msgs.msg.String()
      if self.to_section_uuid is None:
        self.to_section_uuid = []
      if self.from_section_uuid is None:
        self.from_section_uuid = []
      if self.to_lane_uuid is None:
        self.to_lane_uuid = []
      if self.from_lane_uuid is None:
        self.from_lane_uuid = []
      if self.to_pt_uuid is None:
        self.to_pt_uuid = []
      if self.from_pt_uuid is None:
        self.from_pt_uuid = []
      if self.length is None:
        self.length = 0.
      if self.highest_speed is None:
        self.highest_speed = 0.
      if self.traffic_cost is None:
        self.traffic_cost = 0.
    else:
      self.lanes = []
      self.direction_mode = 0
      self.uuid = std_msgs.msg.String()
      self.to_section_uuid = []
      self.from_section_uuid = []
      self.to_lane_uuid = []
      self.from_lane_uuid = []
      self.to_pt_uuid = []
      self.from_pt_uuid = []
      self.length = 0.
      self.highest_speed = 0.
      self.traffic_cost = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        length = len(val1.pts)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts:
          _x = val2
          buff.write(_get_struct_8d9i().pack(_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option))
          _v1 = val2.uuid
          _x = _v1.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v2 = val2.lane_uuid
          _x = _v2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v3 = val2.section_uuid
          _x = _v3.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_b2d().pack(_x.is_main, _x.offset, _x.width))
        _v4 = val1.uuid
        _x = _v4.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.main_uuid
        _x = _v5.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v6 = val1.left_uuid
        _x = _v6.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.right_uuid
        _x = _v7.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v8 = val1.section_uuid
        _x = _v8.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.direction_mode))
      _x = self.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.to_section_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.to_section_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.from_section_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.from_section_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.to_lane_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.to_lane_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.from_lane_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.from_lane_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.to_pt_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.to_pt_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.from_pt_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.from_pt_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.length, _x.highest_speed, _x.traffic_cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lanes is None:
        self.lanes = None
      if self.uuid is None:
        self.uuid = std_msgs.msg.String()
      if self.to_section_uuid is None:
        self.to_section_uuid = None
      if self.from_section_uuid is None:
        self.from_section_uuid = None
      if self.to_lane_uuid is None:
        self.to_lane_uuid = None
      if self.from_lane_uuid is None:
        self.from_lane_uuid = None
      if self.to_pt_uuid is None:
        self.to_pt_uuid = None
      if self.from_pt_uuid is None:
        self.from_pt_uuid = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = perception_msgs.msg.Line()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts = []
        for i in range(0, length):
          val2 = perception_msgs.msg.Point()
          _x = val2
          start = end
          end += 100
          (_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
          _v9 = val2.uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v9.data = str[start:end].decode('utf-8')
          else:
            _v9.data = str[start:end]
          _v10 = val2.lane_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v10.data = str[start:end].decode('utf-8')
          else:
            _v10.data = str[start:end]
          _v11 = val2.section_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v11.data = str[start:end].decode('utf-8')
          else:
            _v11.data = str[start:end]
          val1.pts.append(val2)
        _x = val1
        start = end
        end += 17
        (_x.is_main, _x.offset, _x.width,) = _get_struct_b2d().unpack(str[start:end])
        _v12 = val1.uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.data = str[start:end].decode('utf-8')
        else:
          _v12.data = str[start:end]
        _v13 = val1.main_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.data = str[start:end].decode('utf-8')
        else:
          _v13.data = str[start:end]
        _v14 = val1.left_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.data = str[start:end].decode('utf-8')
        else:
          _v14.data = str[start:end]
        _v15 = val1.right_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.data = str[start:end].decode('utf-8')
        else:
          _v15.data = str[start:end]
        _v16 = val1.section_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.data = str[start:end].decode('utf-8')
        else:
          _v16.data = str[start:end]
        self.lanes.append(val1)
      start = end
      end += 4
      (self.direction_mode,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid.data = str[start:end].decode('utf-8')
      else:
        self.uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.to_section_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.to_section_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.from_section_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.from_section_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.to_lane_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.to_lane_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.from_lane_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.from_lane_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.to_pt_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.to_pt_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.from_pt_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.from_pt_uuid.append(val1)
      _x = self
      start = end
      end += 12
      (_x.length, _x.highest_speed, _x.traffic_cost,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        length = len(val1.pts)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pts:
          _x = val2
          buff.write(_get_struct_8d9i().pack(_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option))
          _v17 = val2.uuid
          _x = _v17.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v18 = val2.lane_uuid
          _x = _v18.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v19 = val2.section_uuid
          _x = _v19.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_b2d().pack(_x.is_main, _x.offset, _x.width))
        _v20 = val1.uuid
        _x = _v20.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = val1.main_uuid
        _x = _v21.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v22 = val1.left_uuid
        _x = _v22.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v23 = val1.right_uuid
        _x = _v23.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v24 = val1.section_uuid
        _x = _v24.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.direction_mode))
      _x = self.uuid.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.to_section_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.to_section_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.from_section_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.from_section_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.to_lane_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.to_lane_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.from_lane_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.from_lane_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.to_pt_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.to_pt_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.from_pt_uuid)
      buff.write(_struct_I.pack(length))
      for val1 in self.from_pt_uuid:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.length, _x.highest_speed, _x.traffic_cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lanes is None:
        self.lanes = None
      if self.uuid is None:
        self.uuid = std_msgs.msg.String()
      if self.to_section_uuid is None:
        self.to_section_uuid = None
      if self.from_section_uuid is None:
        self.from_section_uuid = None
      if self.to_lane_uuid is None:
        self.to_lane_uuid = None
      if self.from_lane_uuid is None:
        self.from_lane_uuid = None
      if self.to_pt_uuid is None:
        self.to_pt_uuid = None
      if self.from_pt_uuid is None:
        self.from_pt_uuid = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = perception_msgs.msg.Line()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pts = []
        for i in range(0, length):
          val2 = perception_msgs.msg.Point()
          _x = val2
          start = end
          end += 100
          (_x.x, _x.y, _x.z, _x.s, _x.cuv, _x.heading, _x.speed, _x.speedkmh, _x.rtk_mode, _x.driving_mode, _x.special_mode, _x.obs_search_strategy, _x.speed_mode, _x.obs_strategy, _x.follow_strategy, _x.cross_option, _x.reserved_option,) = _get_struct_8d9i().unpack(str[start:end])
          _v25 = val2.uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v25.data = str[start:end].decode('utf-8')
          else:
            _v25.data = str[start:end]
          _v26 = val2.lane_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v26.data = str[start:end].decode('utf-8')
          else:
            _v26.data = str[start:end]
          _v27 = val2.section_uuid
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v27.data = str[start:end].decode('utf-8')
          else:
            _v27.data = str[start:end]
          val1.pts.append(val2)
        _x = val1
        start = end
        end += 17
        (_x.is_main, _x.offset, _x.width,) = _get_struct_b2d().unpack(str[start:end])
        _v28 = val1.uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.data = str[start:end].decode('utf-8')
        else:
          _v28.data = str[start:end]
        _v29 = val1.main_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v29.data = str[start:end].decode('utf-8')
        else:
          _v29.data = str[start:end]
        _v30 = val1.left_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.data = str[start:end].decode('utf-8')
        else:
          _v30.data = str[start:end]
        _v31 = val1.right_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.data = str[start:end].decode('utf-8')
        else:
          _v31.data = str[start:end]
        _v32 = val1.section_uuid
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.data = str[start:end].decode('utf-8')
        else:
          _v32.data = str[start:end]
        self.lanes.append(val1)
      start = end
      end += 4
      (self.direction_mode,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uuid.data = str[start:end].decode('utf-8')
      else:
        self.uuid.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.to_section_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.to_section_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.from_section_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.from_section_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.to_lane_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.to_lane_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.from_lane_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.from_lane_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.to_pt_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.to_pt_uuid.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.from_pt_uuid = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.from_pt_uuid.append(val1)
      _x = self
      start = end
      end += 12
      (_x.length, _x.highest_speed, _x.traffic_cost,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_8d9i = None
def _get_struct_8d9i():
    global _struct_8d9i
    if _struct_8d9i is None:
        _struct_8d9i = struct.Struct("<8d9i")
    return _struct_8d9i
_struct_b2d = None
def _get_struct_b2d():
    global _struct_b2d
    if _struct_b2d is None:
        _struct_b2d = struct.Struct("<b2d")
    return _struct_b2d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
