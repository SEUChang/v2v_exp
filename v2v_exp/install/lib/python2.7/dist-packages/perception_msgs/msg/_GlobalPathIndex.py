# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/GlobalPathIndex.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GlobalPathIndex(genpy.Message):
  _md5sum = "1d5f95ec9e9a5e5dadbfd38059134fcf"
  _type = "perception_msgs/GlobalPathIndex"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#############################
###       SunHao          ###
#############################


int32 start_section
int32 start_lane
int32 start_pt

#########################

int32[] topo

#########################
int32 goal_section
int32 goal_lane
int32 goal_pt

"""
  __slots__ = ['start_section','start_lane','start_pt','topo','goal_section','goal_lane','goal_pt']
  _slot_types = ['int32','int32','int32','int32[]','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_section,start_lane,start_pt,topo,goal_section,goal_lane,goal_pt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalPathIndex, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_section is None:
        self.start_section = 0
      if self.start_lane is None:
        self.start_lane = 0
      if self.start_pt is None:
        self.start_pt = 0
      if self.topo is None:
        self.topo = []
      if self.goal_section is None:
        self.goal_section = 0
      if self.goal_lane is None:
        self.goal_lane = 0
      if self.goal_pt is None:
        self.goal_pt = 0
    else:
      self.start_section = 0
      self.start_lane = 0
      self.start_pt = 0
      self.topo = []
      self.goal_section = 0
      self.goal_lane = 0
      self.goal_pt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.start_section, _x.start_lane, _x.start_pt))
      length = len(self.topo)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.topo))
      _x = self
      buff.write(_get_struct_3i().pack(_x.goal_section, _x.goal_lane, _x.goal_pt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start_section, _x.start_lane, _x.start_pt,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.topo = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.goal_section, _x.goal_lane, _x.goal_pt,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.start_section, _x.start_lane, _x.start_pt))
      length = len(self.topo)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.topo.tostring())
      _x = self
      buff.write(_get_struct_3i().pack(_x.goal_section, _x.goal_lane, _x.goal_pt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start_section, _x.start_lane, _x.start_pt,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.topo = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 12
      (_x.goal_section, _x.goal_lane, _x.goal_pt,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
