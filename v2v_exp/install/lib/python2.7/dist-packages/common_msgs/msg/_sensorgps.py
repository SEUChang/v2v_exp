# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/sensorgps.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sensorgps(genpy.Message):
  _md5sum = "942117abbdd2207c4cfc57759afd9a93"
  _type = "common_msgs/sensorgps"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 lon          #纬度
float64 lat          #经度
uint8 roadtype       #道路属性
uint8 lanetype       #当前车道|总车道(4|4)
float64 heading      #航向角
float64 pitch        #俯仰角
float64 roll         #横滚角
float64 velocity     #速度
uint8 status         #导航状态
uint8 satenum        #卫星个数
int32 gpstime        #gps时间
uint8 isvalid        #有效位
int64 timestamp      #时间戳"""
  __slots__ = ['lon','lat','roadtype','lanetype','heading','pitch','roll','velocity','status','satenum','gpstime','isvalid','timestamp']
  _slot_types = ['float64','float64','uint8','uint8','float64','float64','float64','float64','uint8','uint8','int32','uint8','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lon,lat,roadtype,lanetype,heading,pitch,roll,velocity,status,satenum,gpstime,isvalid,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensorgps, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lon is None:
        self.lon = 0.
      if self.lat is None:
        self.lat = 0.
      if self.roadtype is None:
        self.roadtype = 0
      if self.lanetype is None:
        self.lanetype = 0
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.status is None:
        self.status = 0
      if self.satenum is None:
        self.satenum = 0
      if self.gpstime is None:
        self.gpstime = 0
      if self.isvalid is None:
        self.isvalid = 0
      if self.timestamp is None:
        self.timestamp = 0
    else:
      self.lon = 0.
      self.lat = 0.
      self.roadtype = 0
      self.lanetype = 0
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.velocity = 0.
      self.status = 0
      self.satenum = 0
      self.gpstime = 0
      self.isvalid = 0
      self.timestamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d2B4d2BiBq().pack(_x.lon, _x.lat, _x.roadtype, _x.lanetype, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.status, _x.satenum, _x.gpstime, _x.isvalid, _x.timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.lon, _x.lat, _x.roadtype, _x.lanetype, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.status, _x.satenum, _x.gpstime, _x.isvalid, _x.timestamp,) = _get_struct_2d2B4d2BiBq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d2B4d2BiBq().pack(_x.lon, _x.lat, _x.roadtype, _x.lanetype, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.status, _x.satenum, _x.gpstime, _x.isvalid, _x.timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.lon, _x.lat, _x.roadtype, _x.lanetype, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.status, _x.satenum, _x.gpstime, _x.isvalid, _x.timestamp,) = _get_struct_2d2B4d2BiBq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d2B4d2BiBq = None
def _get_struct_2d2B4d2BiBq():
    global _struct_2d2B4d2BiBq
    if _struct_2d2B4d2BiBq is None:
        _struct_2d2B4d2BiBq = struct.Struct("<2d2B4d2BiBq")
    return _struct_2d2B4d2BiBq
