# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from little_ant_msgs/ControlCmd2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlCmd2(genpy.Message):
  _md5sum = "37dba26fbb2ffb96611897d743ebdf12"
  _type = "little_ant_msgs/ControlCmd2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#IDM_2  0x1C5


uint8 GEAR_DRIVE   = 1
uint8 GEAR_REVERSE = 9
uint8 GEAR_NEUTRAL = 10
uint8 GEAR_PARKING = 11

uint8 set_gear
float32 set_speed
float32 set_brake
float32 set_accelerate
float32 set_roadWheelAngle   #CCW(-), CW(+)
bool set_emergencyBrake
"""
  # Pseudo-constants
  GEAR_DRIVE = 1
  GEAR_REVERSE = 9
  GEAR_NEUTRAL = 10
  GEAR_PARKING = 11

  __slots__ = ['set_gear','set_speed','set_brake','set_accelerate','set_roadWheelAngle','set_emergencyBrake']
  _slot_types = ['uint8','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_gear,set_speed,set_brake,set_accelerate,set_roadWheelAngle,set_emergencyBrake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlCmd2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.set_gear is None:
        self.set_gear = 0
      if self.set_speed is None:
        self.set_speed = 0.
      if self.set_brake is None:
        self.set_brake = 0.
      if self.set_accelerate is None:
        self.set_accelerate = 0.
      if self.set_roadWheelAngle is None:
        self.set_roadWheelAngle = 0.
      if self.set_emergencyBrake is None:
        self.set_emergencyBrake = False
    else:
      self.set_gear = 0
      self.set_speed = 0.
      self.set_brake = 0.
      self.set_accelerate = 0.
      self.set_roadWheelAngle = 0.
      self.set_emergencyBrake = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4fB().pack(_x.set_gear, _x.set_speed, _x.set_brake, _x.set_accelerate, _x.set_roadWheelAngle, _x.set_emergencyBrake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.set_gear, _x.set_speed, _x.set_brake, _x.set_accelerate, _x.set_roadWheelAngle, _x.set_emergencyBrake,) = _get_struct_B4fB().unpack(str[start:end])
      self.set_emergencyBrake = bool(self.set_emergencyBrake)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4fB().pack(_x.set_gear, _x.set_speed, _x.set_brake, _x.set_accelerate, _x.set_roadWheelAngle, _x.set_emergencyBrake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.set_gear, _x.set_speed, _x.set_brake, _x.set_accelerate, _x.set_roadWheelAngle, _x.set_emergencyBrake,) = _get_struct_B4fB().unpack(str[start:end])
      self.set_emergencyBrake = bool(self.set_emergencyBrake)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4fB = None
def _get_struct_B4fB():
    global _struct_B4fB
    if _struct_B4fB is None:
        _struct_B4fB = struct.Struct("<B4fB")
    return _struct_B4fB
