// Generated by gencpp from file common_msgs/sensorgps.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_SENSORGPS_H
#define COMMON_MSGS_MESSAGE_SENSORGPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct sensorgps_
{
  typedef sensorgps_<ContainerAllocator> Type;

  sensorgps_()
    : lon(0.0)
    , lat(0.0)
    , roadtype(0)
    , lanetype(0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , velocity(0.0)
    , status(0)
    , satenum(0)
    , gpstime(0)
    , isvalid(0)
    , timestamp(0)  {
    }
  sensorgps_(const ContainerAllocator& _alloc)
    : lon(0.0)
    , lat(0.0)
    , roadtype(0)
    , lanetype(0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , velocity(0.0)
    , status(0)
    , satenum(0)
    , gpstime(0)
    , isvalid(0)
    , timestamp(0)  {
  (void)_alloc;
    }



   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef uint8_t _roadtype_type;
  _roadtype_type roadtype;

   typedef uint8_t _lanetype_type;
  _lanetype_type lanetype;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _satenum_type;
  _satenum_type satenum;

   typedef int32_t _gpstime_type;
  _gpstime_type gpstime;

   typedef uint8_t _isvalid_type;
  _isvalid_type isvalid;

   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::common_msgs::sensorgps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::sensorgps_<ContainerAllocator> const> ConstPtr;

}; // struct sensorgps_

typedef ::common_msgs::sensorgps_<std::allocator<void> > sensorgps;

typedef boost::shared_ptr< ::common_msgs::sensorgps > sensorgpsPtr;
typedef boost::shared_ptr< ::common_msgs::sensorgps const> sensorgpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::sensorgps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::sensorgps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'common_msgs': ['/home/sunhao/wild/src/common_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::sensorgps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::sensorgps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::sensorgps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::sensorgps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::sensorgps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::sensorgps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::sensorgps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "942117abbdd2207c4cfc57759afd9a93";
  }

  static const char* value(const ::common_msgs::sensorgps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x942117abbdd2207cULL;
  static const uint64_t static_value2 = 0x4cfc57759afd9a93ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::sensorgps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/sensorgps";
  }

  static const char* value(const ::common_msgs::sensorgps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::sensorgps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lon          #纬度\n\
float64 lat          #经度\n\
uint8 roadtype       #道路属性\n\
uint8 lanetype       #当前车道|总车道(4|4)\n\
float64 heading      #航向角\n\
float64 pitch        #俯仰角\n\
float64 roll         #横滚角\n\
float64 velocity     #速度\n\
uint8 status         #导航状态\n\
uint8 satenum        #卫星个数\n\
int32 gpstime        #gps时间\n\
uint8 isvalid        #有效位\n\
int64 timestamp      #时间戳\n\
";
  }

  static const char* value(const ::common_msgs::sensorgps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::sensorgps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.roadtype);
      stream.next(m.lanetype);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.velocity);
      stream.next(m.status);
      stream.next(m.satenum);
      stream.next(m.gpstime);
      stream.next(m.isvalid);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensorgps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::sensorgps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::sensorgps_<ContainerAllocator>& v)
  {
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "roadtype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roadtype);
    s << indent << "lanetype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lanetype);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "satenum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satenum);
    s << indent << "gpstime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gpstime);
    s << indent << "isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isvalid);
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_SENSORGPS_H
