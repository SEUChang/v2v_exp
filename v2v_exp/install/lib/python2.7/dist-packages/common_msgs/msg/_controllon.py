# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/controllon.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class controllon(genpy.Message):
  _md5sum = "50c02c1f1bee67af253cc975ea95407b"
  _type = "common_msgs/controllon"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8    method     #使能位
int8     pedal      #输出量
uint8    mode       #mode
float32  objdis     #
float32  objrel     #
float32  parkdis
uint8    isvalid    #有效位
uint8    geer       #
int64    timestamp  #时间戳 
uint8    gasPedal
uint8    brakePedal
uint8    targetSpeed"""
  __slots__ = ['method','pedal','mode','objdis','objrel','parkdis','isvalid','geer','timestamp','gasPedal','brakePedal','targetSpeed']
  _slot_types = ['uint8','int8','uint8','float32','float32','float32','uint8','uint8','int64','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       method,pedal,mode,objdis,objrel,parkdis,isvalid,geer,timestamp,gasPedal,brakePedal,targetSpeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controllon, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.method is None:
        self.method = 0
      if self.pedal is None:
        self.pedal = 0
      if self.mode is None:
        self.mode = 0
      if self.objdis is None:
        self.objdis = 0.
      if self.objrel is None:
        self.objrel = 0.
      if self.parkdis is None:
        self.parkdis = 0.
      if self.isvalid is None:
        self.isvalid = 0
      if self.geer is None:
        self.geer = 0
      if self.timestamp is None:
        self.timestamp = 0
      if self.gasPedal is None:
        self.gasPedal = 0
      if self.brakePedal is None:
        self.brakePedal = 0
      if self.targetSpeed is None:
        self.targetSpeed = 0
    else:
      self.method = 0
      self.pedal = 0
      self.mode = 0
      self.objdis = 0.
      self.objrel = 0.
      self.parkdis = 0.
      self.isvalid = 0
      self.geer = 0
      self.timestamp = 0
      self.gasPedal = 0
      self.brakePedal = 0
      self.targetSpeed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BbB3f2Bq3B().pack(_x.method, _x.pedal, _x.mode, _x.objdis, _x.objrel, _x.parkdis, _x.isvalid, _x.geer, _x.timestamp, _x.gasPedal, _x.brakePedal, _x.targetSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.method, _x.pedal, _x.mode, _x.objdis, _x.objrel, _x.parkdis, _x.isvalid, _x.geer, _x.timestamp, _x.gasPedal, _x.brakePedal, _x.targetSpeed,) = _get_struct_BbB3f2Bq3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BbB3f2Bq3B().pack(_x.method, _x.pedal, _x.mode, _x.objdis, _x.objrel, _x.parkdis, _x.isvalid, _x.geer, _x.timestamp, _x.gasPedal, _x.brakePedal, _x.targetSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.method, _x.pedal, _x.mode, _x.objdis, _x.objrel, _x.parkdis, _x.isvalid, _x.geer, _x.timestamp, _x.gasPedal, _x.brakePedal, _x.targetSpeed,) = _get_struct_BbB3f2Bq3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BbB3f2Bq3B = None
def _get_struct_BbB3f2Bq3B():
    global _struct_BbB3f2Bq3B
    if _struct_BbB3f2Bq3B is None:
        _struct_BbB3f2Bq3B = struct.Struct("<BbB3f2Bq3B")
    return _struct_BbB3f2Bq3B
